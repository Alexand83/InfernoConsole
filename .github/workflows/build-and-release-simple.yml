name: Build and Release Inferno Console

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    
    # ✅ FIX: Permessi per il token GitHub
    permissions:
      contents: write
      packages: write
      id-token: write
    
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        # macOS commentato - da rifare in seguito
        # os: [windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js (Latest)
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        check-latest: true
        cache: 'npm'

    - name: Upgrade npm to latest
      run: npm i -g npm@latest

    - name: Install dependencies
      run: npm ci || npm install

    - name: Build application
      run: npm run build

    - name: Build Electron app (Windows)
      if: matrix.os == 'windows-latest'
      run: npm run dist:win:portable
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Create Self-Extracting Installer (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Write-Host "Creating self-extracting installer for Windows..."
        Set-Location dist-electron
        
        # Trova il file .exe generato
        $EXE_FILE = Get-ChildItem -Name "*.exe" | Select-Object -First 1
        Write-Host "Found executable: $EXE_FILE"
        
        # Crea un installer batch che include tutto
        $installerScript = @"
        @echo off
        setlocal enabledelayedexpansion
        echo ========================================
        echo    INFERNO CONSOLE - INSTALLER
        echo ========================================
        echo.
        
        set "INSTALL_DIR=%USERPROFILE%\Desktop\Inferno Console"
        if not exist "%INSTALL_DIR%" mkdir "%INSTALL_DIR%"
        
        echo [INFO] Copiando file applicazione...
        xcopy "win-unpacked\*" "%INSTALL_DIR%\" /E /I /Y /Q >nul
        if %ERRORLEVEL% NEQ 0 (
            echo [ERRORE] Errore durante la copia dei file.
            goto :END
        )
        echo [OK] File applicazione copiati con successo.
        
        echo [INFO] Creazione shortcut desktop...
        powershell -Command "$WshShell = New-Object -comObject WScript.Shell; $Shortcut = $WshShell.CreateShortcut('%USERPROFILE%\Desktop\Inferno Console.lnk'); $Shortcut.TargetPath = '%INSTALL_DIR%\Inferno Console.exe'; $Shortcut.WorkingDirectory = '%INSTALL_DIR%'; $Shortcut.Description = 'Inferno Console - DJ Software'; $Shortcut.Save()" >nul 2>&1
        if %ERRORLEVEL% NEQ 0 (
            echo [ERRORE] Errore durante la creazione dello shortcut desktop.
        ) else (
            echo [OK] Shortcut desktop creato.
        )
        
        echo [INFO] Creazione shortcut Start Menu...
        powershell -Command "$WshShell = New-Object -comObject WScript.Shell; $Shortcut = $WshShell.CreateShortcut('%APPDATA%\Microsoft\Windows\Start Menu\Programs\Inferno Console.lnk'); $Shortcut.TargetPath = '%INSTALL_DIR%\Inferno Console.exe'; $Shortcut.WorkingDirectory = '%INSTALL_DIR%'; $Shortcut.Description = 'Inferno Console - DJ Software'; $Shortcut.Save()" >nul 2>&1
        if %ERRORLEVEL% NEQ 0 (
            echo [ERRORE] Errore durante la creazione dello shortcut Start Menu.
        ) else (
            echo [OK] Shortcut Start Menu creato.
        )
        
        echo.
        echo [OK] Installazione completata!
        echo.
        
        :ASK_LAUNCH
        set /p LAUNCH_APP="Vuoi avviare Inferno Console ora? (S/N): "
        if /i "%LAUNCH_APP%"=="s" (
            echo [INFO] Avvio di Inferno Console...
            start "" "%INSTALL_DIR%\Inferno Console.exe"
        ) else if /i "%LAUNCH_APP%"=="n" (
            echo [INFO] Non avvio l'applicazione.
        ) else (
            echo [AVVISO] Scelta non valida. Inserisci S o N.
            goto :ASK_LAUNCH
        )
        
        :END
        echo.
        echo Premi un tasto per uscire...
        pause >nul
        "@
        
        $installerScript | Out-File -FilePath "Inferno-Console-Installer.bat" -Encoding ASCII
        
        # Crea un installer .exe che include tutto
        $exeInstaller = @"
        @echo off
        setlocal enabledelayedexpansion
        echo ========================================
        echo    INFERNO CONSOLE - INSTALLER
        echo ========================================
        echo.
        echo [INFO] Avvio installer...
        call "%~dp0Inferno-Console-Installer.bat"
        "@
        
        $exeInstaller | Out-File -FilePath "Inferno-Console-Installer.exe" -Encoding ASCII
        
        # Crea un installer self-extracting che include tutto
        $selfExtractingInstaller = @"
        @echo off
        setlocal enabledelayedexpansion
        echo ========================================
        echo    INFERNO CONSOLE - INSTALLER
        echo ========================================
        echo.
        
        set "INSTALL_DIR=%USERPROFILE%\Desktop\Inferno Console"
        if not exist "%INSTALL_DIR%" mkdir "%INSTALL_DIR%"
        
        echo [INFO] Copiando file applicazione...
        xcopy "win-unpacked\*" "%INSTALL_DIR%\" /E /I /Y /Q >nul
        if %ERRORLEVEL% NEQ 0 (
            echo [ERRORE] Errore durante la copia dei file.
            goto :END
        )
        echo [OK] File applicazione copiati con successo.
        
        echo [INFO] Creazione shortcut desktop...
        powershell -Command "$WshShell = New-Object -comObject WScript.Shell; $Shortcut = $WshShell.CreateShortcut('%USERPROFILE%\Desktop\Inferno Console.lnk'); $Shortcut.TargetPath = '%INSTALL_DIR%\Inferno Console.exe'; $Shortcut.WorkingDirectory = '%INSTALL_DIR%'; $Shortcut.Description = 'Inferno Console - DJ Software'; $Shortcut.Save()" >nul 2>&1
        if %ERRORLEVEL% NEQ 0 (
            echo [ERRORE] Errore durante la creazione dello shortcut desktop.
        ) else (
            echo [OK] Shortcut desktop creato.
        )
        
        echo [INFO] Creazione shortcut Start Menu...
        powershell -Command "$WshShell = New-Object -comObject WScript.Shell; $Shortcut = $WshShell.CreateShortcut('%APPDATA%\Microsoft\Windows\Start Menu\Programs\Inferno Console.lnk'); $Shortcut.TargetPath = '%INSTALL_DIR%\Inferno Console.exe'; $Shortcut.WorkingDirectory = '%INSTALL_DIR%'; $Shortcut.Description = 'Inferno Console - DJ Software'; $Shortcut.Save()" >nul 2>&1
        if %ERRORLEVEL% NEQ 0 (
            echo [ERRORE] Errore durante la creazione dello shortcut Start Menu.
        ) else (
            echo [OK] Shortcut Start Menu creato.
        )
        
        echo.
        echo [OK] Installazione completata!
        echo.
        
        :ASK_LAUNCH
        set /p LAUNCH_APP="Vuoi avviare Inferno Console ora? (S/N): "
        if /i "%LAUNCH_APP%"=="s" (
            echo [INFO] Avvio di Inferno Console...
            start "" "%INSTALL_DIR%\Inferno Console.exe"
        ) else if /i "%LAUNCH_APP%"=="n" (
            echo [INFO] Non avvio l'applicazione.
        ) else (
            echo [AVVISO] Scelta non valida. Inserisci S o N.
            goto :ASK_LAUNCH
        )
        
        :END
        echo.
        echo Premi un tasto per uscire...
        pause >nul
        "@
        
        $selfExtractingInstaller | Out-File -FilePath "Inferno-Console-Installer.exe" -Encoding ASCII
        
        Write-Host "Self-extracting installer created: Inferno-Console-Installer.exe"
        Write-Host "Installer size: $((Get-Item 'Inferno-Console-Installer.exe').Length) bytes"
        Write-Host "Batch script size: $((Get-Item 'Inferno-Console-Installer.bat').Length) bytes"

    - name: Generate latest.yml for Windows
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Write-Host "Generating latest.yml for Windows..."
        Set-Location dist-electron
        
        # Usa l'installer self-extracting invece del file portabile
        $INSTALLER_FILE = "Inferno-Console-Installer.exe"
        $INSTALLER_SIZE = (Get-Item $INSTALLER_FILE).Length
        $INSTALLER_SHA512 = (Get-FileHash -Path $INSTALLER_FILE -Algorithm SHA512).Hash.ToLower()
        
        # Crea latest.yml per l'installer self-extracting
        $latestYml = @"
        version: ${{ github.ref_name }}
        files:
          - url: $INSTALLER_FILE
            sha512: $INSTALLER_SHA512
            size: $INSTALLER_SIZE
        path: $INSTALLER_FILE
        sha512: $INSTALLER_SHA512
        releaseDate: '$(Get-Date -Format "yyyy-MM-ddTHH:mm:ss.fffZ")'
        "@
        
        $latestYml | Out-File -FilePath "latest.yml" -Encoding UTF8
        
        Write-Host "Generated latest.yml for installer:"
        Get-Content latest.yml

    - name: Create Desktop Shortcut (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Write-Host "Creating desktop shortcut for Windows..."
        Set-Location dist-electron
        
        # Trova il file .exe generato
        $EXE_FILE = Get-ChildItem -Name "*.exe" | Select-Object -First 1
        $EXE_PATH = (Get-Item $EXE_FILE).FullName
        
        # Crea script PowerShell per creare collegamento
        $shortcutScript = @"
        `$WshShell = New-Object -comObject WScript.Shell
        `$DesktopPath = [Environment]::GetFolderPath("Desktop")
        `$ShortcutPath = Join-Path `$DesktopPath "Inferno Console.lnk"
        `$Shortcut = `$WshShell.CreateShortcut(`$ShortcutPath)
        `$Shortcut.TargetPath = "$EXE_PATH"
        `$Shortcut.WorkingDirectory = (Split-Path "$EXE_PATH")
        `$Shortcut.Description = "Inferno Console - Professional DJ Console"
        `$Shortcut.Save()
        Write-Host "Desktop shortcut created: `$ShortcutPath"
        "@
        
        $shortcutScript | Out-File -FilePath "create_shortcut.ps1" -Encoding UTF8
        Write-Host "Shortcut script created, ready for user to run"

    # macOS build commentato - da rifare in seguito
    # - name: Build Electron app (macOS)
    #   if: matrix.os == 'macos-latest'
    #   run: npm run dist
    #   env:
    #     CSC_IDENTITY_AUTO_DISCOVERY: false
    #     GH_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Create Release (Windows)
      if: matrix.os == 'windows-latest' && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Inferno Console ${{ github.ref_name }}
        body: |
          ## 🎵 Inferno Console ${{ github.ref_name }}
          
          ### ✨ Nuove Funzionalità
          - Sistema di streaming continuo migliorato
          - Fix auto-reconnessione dopo disconnessione manuale
          - Nickname DJ personalizzabile per Icecast
          - Interfaccia utente ottimizzata
          
          ### 🐛 Bug Fix
          - Risolto problema di auto-reconnessione indesiderata
          - Migliorato controllo deck audio durante disconnessione
          - Fix logging per debug del sistema di retry
          
          ### 📦 Download
          **Windows**: Scarica `Inferno-Console-Installer.exe` - Installer self-extracting
          
          ### 🚀 Installazione
          1. Scarica `Inferno-Console-Installer.exe`
          2. Esegui l'installer (si auto-estrae e installa)
          3. L'app si avvia automaticamente!
          
          ### ✨ Caratteristiche Installer
          - **Singolo file .exe** - tutto incluso
          - **Auto-estrazione** - nessuna dipendenza esterna
          - **Shortcut automatici** - Desktop e Start Menu
          - **Compatibile con electron-updater**
          
          ### 📝 Note
          - Versione sviluppata da Alessandro(NeverAgain)
          - Licenza MIT
          - Supporto completo per streaming Icecast
        files: |
          dist-electron/Inferno-Console-Installer.exe
          dist-electron/latest.yml
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      continue-on-error: true

    # macOS release commentato - da rifare in seguito
    # - name: Create Release (macOS)
    #   if: matrix.os == 'macos-latest' && startsWith(github.ref, 'refs/tags/')
    #   uses: softprops/action-gh-release@v1
    #   with:
    #     tag_name: ${{ github.ref_name }}
    #     name: Inferno Console ${{ github.ref_name }}
    #     body: |
    #       ## 🎵 Inferno Console ${{ github.ref_name }}
    #       
    #       ### ✨ Nuove Funzionalità
    #       - Sistema di streaming continuo migliorato
    #       - Fix auto-reconnessione dopo disconnessione manuale
    #       - Nickname DJ personalizzabile per Icecast
    #       - Interfaccia utente ottimizzata
    #       
    #       ### 🐛 Bug Fix
    #       - Risolto problema di auto-reconnessione indesiderata
    #       - Migliorato controllo deck audio durante disconnessione
    #       - Fix logging per debug del sistema di retry
    #       
    #       ### 📦 Download
    #       Scegli la versione per il tuo sistema operativo:
    #       
    #       **Windows**: Installa il file `.exe` per Windows 10/11
    #       **macOS**: Installa il file `.dmg` per macOS 10.15+
    #       
    #       ### 🚀 Installazione
    #       1. Scarica il file appropriato per il tuo sistema
    #       2. Esegui l'installer (Windows/macOS)
    #       3. Avvia Inferno Console e goditi la tua sessione DJ!
    #       
    #       ### 📝 Note
    #       - Versione sviluppata da Alessandro(NeverAgain)
    #       - Licenza MIT
    #       - Supporto completo per streaming Icecast
    #     files: |
    #       dist-electron/*.dmg
    #       dist-electron/*.zip
    #     draft: false
    #     prerelease: false
    #     generate_release_notes: true
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
    #   continue-on-error: true

    - name: Upload Release Assets Manually
      if: failure()
      run: |
        echo "⚠️ Release automatico fallito, ma il build è stato completato!"
        echo "📦 I file sono disponibili nella directory dist/"
        echo "🎯 Puoi creare manualmente il release su GitHub:"
        echo "   1. Vai su https://github.com/Alexand83/InfernoConsole/releases"
        echo "   2. Clicca 'Create a new release'"
        echo "   3. Seleziona il tag ${{ github.ref_name }}"
        echo "   4. Carica i file dalla directory dist/"
        echo "   5. Pubblica il release"
