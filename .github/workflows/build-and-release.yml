name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false  # ‚úÖ Non fermare altri build se uno fallisce
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            platform: win
            artifact: DJ-Console-*-win-*.exe
          - os: macos-latest
            platform: mac
            artifact: DJ-Console-*-mac-*.dmg

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Build Electron app (Windows)
      if: matrix.os == 'windows-latest'
      run: npm run dist:win:nsis

    - name: Build Electron app (macOS)
      if: matrix.os == 'macos-latest'
      run: npm run dist
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false

    - name: Upload Windows artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: build-windows-latest
        path: dist/*.exe

    - name: Upload macOS artifacts
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: build-macos-latest
        path: dist/*.dmg

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && (needs.build.result == 'success' || needs.build.result == 'partial')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-windows-latest
        path: dist/windows

    - name: Download macOS artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-macos-latest
        path: dist/macos

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: DJ Console Pro ${{ github.ref_name }}
        body: |
          ## üéµ DJ Console Pro ${{ github.ref_name }}
          
          ### ‚ú® Nuove Funzionalit√†
          - Sistema di streaming continuo migliorato
          - Fix auto-reconnessione dopo disconnessione manuale
          - Nickname DJ personalizzabile per Icecast
          - Interfaccia utente ottimizzata
          
          ### üêõ Bug Fix
          - Risolto problema di auto-reconnessione indesiderata
          - Migliorato controllo deck audio durante disconnessione
          - Fix logging per debug del sistema di retry
          
          ### üì¶ Download
          Scegli la versione per il tuo sistema operativo:
          
          **Windows**: Installa il file `.exe` per Windows 10/11
          **macOS**: Installa il file `.dmg` per macOS 10.15+
          
          ### üöÄ Installazione
          1. Scarica il file appropriato per il tuo sistema
          2. Esegui l'installer (Windows/macOS)
          3. Avvia DJ Console Pro e goditi la tua sessione DJ!
          
          ### üìù Note
          - Versione sviluppata da Alessandro(NeverAgain)
          - Licenza MIT
          - Supporto completo per streaming Icecast
        files: |
          dist/windows/*
          dist/macos/*
        draft: true
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

    - name: Upload Release Assets Manually
      if: failure()
      run: |
        echo "‚ö†Ô∏è Release automatico fallito, ma gli artifact sono stati creati!"
        echo "üì¶ Gli artifact sono disponibili nella sezione 'Actions' di questo workflow"
        echo "üéØ Puoi creare manualmente il release su GitHub:"
        echo "   1. Vai su https://github.com/Alexand83/InfernoConsole/releases"
        echo "   2. Clicca 'Create a new release'"
        echo "   3. Seleziona il tag ${{ github.ref_name }}"
        echo "   4. Scarica gli artifact da questo workflow e caricali"
        echo "   5. Pubblica il release"
