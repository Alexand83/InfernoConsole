{"version":3,"file":"LibraryManager-c9bac000.js","sources":["../../node_modules/lucide-react/dist/esm/icons/filter.mjs","../../node_modules/lucide-react/dist/esm/icons/folder-open.mjs","../../node_modules/lucide-react/dist/esm/icons/hard-drive.mjs","../../node_modules/lucide-react/dist/esm/icons/pen-line.mjs","../../node_modules/lucide-react/dist/esm/icons/plus.mjs","../../node_modules/lucide-react/dist/esm/icons/search.mjs","../../node_modules/lucide-react/dist/esm/icons/star.mjs","../../node_modules/lucide-react/dist/esm/icons/trash-2.mjs","../../src/utils/AudioAnalysis.ts","../../src/utils/FileUploadManager.ts","../../src/components/MemoryManager.tsx","../../src/components/FolderImporter.tsx","../../src/components/AdvancedSearch.tsx","../../src/components/LibraryManager.tsx"],"sourcesContent":["/**\n * lucide-react v0.0.1 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.mjs';\n\nconst Filter = createLucideIcon(\"Filter\", [\n  [\n    \"polygon\",\n    { points: \"22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3\", key: \"1yg77f\" }\n  ]\n]);\n\nexport { Filter as default };\n//# sourceMappingURL=filter.mjs.map\n","/**\n * lucide-react v0.0.1 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.mjs';\n\nconst FolderOpen = createLucideIcon(\"FolderOpen\", [\n  [\n    \"path\",\n    {\n      d: \"m6 14 1.45-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.55 6a2 2 0 0 1-1.94 1.5H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H18a2 2 0 0 1 2 2v2\",\n      key: \"1nmvlm\"\n    }\n  ]\n]);\n\nexport { FolderOpen as default };\n//# sourceMappingURL=folder-open.mjs.map\n","/**\n * lucide-react v0.0.1 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.mjs';\n\nconst HardDrive = createLucideIcon(\"HardDrive\", [\n  [\"line\", { x1: \"22\", x2: \"2\", y1: \"12\", y2: \"12\", key: \"1y58io\" }],\n  [\n    \"path\",\n    {\n      d: \"M5.45 5.11 2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z\",\n      key: \"oot6mr\"\n    }\n  ],\n  [\"line\", { x1: \"6\", x2: \"6.01\", y1: \"16\", y2: \"16\", key: \"sgf278\" }],\n  [\"line\", { x1: \"10\", x2: \"10.01\", y1: \"16\", y2: \"16\", key: \"1l4acy\" }]\n]);\n\nexport { HardDrive as default };\n//# sourceMappingURL=hard-drive.mjs.map\n","/**\n * lucide-react v0.0.1 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.mjs';\n\nconst PenLine = createLucideIcon(\"PenLine\", [\n  [\"path\", { d: \"M12 20h9\", key: \"t2du7b\" }],\n  [\n    \"path\",\n    { d: \"M16.5 3.5a2.12 2.12 0 0 1 3 3L7 19l-4 1 1-4Z\", key: \"ymcmye\" }\n  ]\n]);\n\nexport { PenLine as default };\n//# sourceMappingURL=pen-line.mjs.map\n","/**\n * lucide-react v0.0.1 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.mjs';\n\nconst Plus = createLucideIcon(\"Plus\", [\n  [\"path\", { d: \"M5 12h14\", key: \"1ays0h\" }],\n  [\"path\", { d: \"M12 5v14\", key: \"s699le\" }]\n]);\n\nexport { Plus as default };\n//# sourceMappingURL=plus.mjs.map\n","/**\n * lucide-react v0.0.1 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.mjs';\n\nconst Search = createLucideIcon(\"Search\", [\n  [\"circle\", { cx: \"11\", cy: \"11\", r: \"8\", key: \"4ej97u\" }],\n  [\"path\", { d: \"m21 21-4.3-4.3\", key: \"1qie3q\" }]\n]);\n\nexport { Search as default };\n//# sourceMappingURL=search.mjs.map\n","/**\n * lucide-react v0.0.1 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.mjs';\n\nconst Star = createLucideIcon(\"Star\", [\n  [\n    \"polygon\",\n    {\n      points: \"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2\",\n      key: \"8f66p6\"\n    }\n  ]\n]);\n\nexport { Star as default };\n//# sourceMappingURL=star.mjs.map\n","/**\n * lucide-react v0.0.1 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.mjs';\n\nconst Trash2 = createLucideIcon(\"Trash2\", [\n  [\"path\", { d: \"M3 6h18\", key: \"d0wm0j\" }],\n  [\"path\", { d: \"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\", key: \"4alrt4\" }],\n  [\"path\", { d: \"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\", key: \"v07s0e\" }],\n  [\"line\", { x1: \"10\", x2: \"10\", y1: \"11\", y2: \"17\", key: \"1uufr5\" }],\n  [\"line\", { x1: \"14\", x2: \"14\", y1: \"11\", y2: \"17\", key: \"xtxkd\" }]\n]);\n\nexport { Trash2 as default };\n//# sourceMappingURL=trash-2.mjs.map\n","export async function generateWaveformPeaksFromBlob(blob: Blob, numSamples = 200): Promise<number[]> {\n  try {\n    const arrayBuffer = await blob.arrayBuffer()\n    const AudioCtx = (window as any).AudioContext || (window as any).webkitAudioContext\n    const ac = new AudioCtx()\n    const audioBuffer: AudioBuffer = await ac.decodeAudioData(arrayBuffer)\n    // Close to free resources\n    try { if ((ac as any).state !== 'closed') await ac.close() } catch {}\n\n    const channelData = audioBuffer.getChannelData(0)\n    if (!channelData || channelData.length === 0) return []\n\n    const blockSize = Math.max(1, Math.floor(channelData.length / numSamples))\n    const peaks: number[] = []\n    for (let i = 0; i < numSamples; i++) {\n      const start = i * blockSize\n      const end = Math.min(start + blockSize, channelData.length)\n      let max = 0\n      for (let j = start; j < end; j++) {\n        const v = Math.abs(channelData[j])\n        if (v > max) max = v\n      }\n      peaks.push(Math.min(1, max))\n    }\n    return peaks\n  } catch (err) {\n    return []\n  }\n}\n\n\n","import { localDatabase, DatabaseTrack } from '../database/LocalDatabase'\nimport { putBlob } from '../database/BlobStore'\n// Rimuovo l'import di get-video-duration che non funziona nel browser\n// import { getVideoDurationInSeconds } from 'get-video-duration'\n\n// Wrapper per operazioni database con retry e gestione errori\nconst safeDatabaseOperation = async <T>(\n  operation: () => Promise<T>,\n  operationName: string,\n  maxRetries: number = 3\n): Promise<T> => {\n  let lastError: Error | null = null\n  \n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      return await operation()\n    } catch (error) {\n      lastError = error instanceof Error ? error : new Error(String(error))\n      console.warn(`Database operation ${operationName} failed (attempt ${attempt}/${maxRetries}):`, lastError)\n      \n      if (attempt < maxRetries) {\n        // Pausa esponenziale prima del retry\n        const delay = Math.min(1000 * Math.pow(2, attempt - 1), 5000)\n        await new Promise(resolve => setTimeout(resolve, delay))\n      }\n    }\n  }\n  \n  throw new Error(`Database operation ${operationName} failed after ${maxRetries} attempts: ${lastError?.message}`)\n}\n\nexport interface UploadProgress {\n  file: File\n  progress: number\n  status: 'uploading' | 'processing' | 'completed' | 'error'\n  error?: string\n}\n\nexport interface AudioMetadata {\n  title: string\n  artist: string\n  album?: string\n  genre?: string\n  duration: number\n  bpm?: number\n  key?: string\n  energy?: 'low' | 'medium' | 'high'\n}\n\nexport class FileUploadManager {\n  private supportedFormats = [\n    'audio/mp3',\n    'audio/mpeg',\n    'audio/wav',\n    'audio/x-wav',\n    'audio/wave',\n    'audio/flac',\n    'audio/aac',\n    'audio/aacp',\n    'audio/x-m4a',\n    'audio/mp4',\n    'audio/ogg',\n    'audio/webm',\n    'audio/opus'\n  ]\n  private supportedExtensions = ['.mp3', '.wav', '.flac', '.aac', '.m4a', '.ogg', '.webm', '.opus']\n  private maxFileSize = 100 * 1024 * 1024 // 100MB\n  private onProgress?: (progress: UploadProgress) => void\n\n  constructor(onProgress?: (progress: UploadProgress) => void) {\n    this.onProgress = onProgress\n  }\n\n  async uploadFiles(files: FileList | File[]): Promise<DatabaseTrack[]> {\n    const fileArray = Array.from(files)\n    const validFiles = fileArray.filter(file => this.isValidFile(file))\n    \n    if (validFiles.length === 0) {\n      throw new Error('No valid audio files found')\n    }\n\n    const uploadedTracks: DatabaseTrack[] = []\n\n    for (const file of validFiles) {\n      try {\n        const track = await this.processFile(file)\n        if (track) {\n          uploadedTracks.push(track)\n        }\n      } catch (error) {\n        console.error(`Error processing file ${file.name}:`, error)\n        this.updateProgress(file, 0, 'error', error instanceof Error ? error.message : 'Unknown error')\n      }\n    }\n\n    return uploadedTracks\n  }\n\n  private isValidFile(file: File): boolean {\n    // MIME type check\n    if (file.type && this.supportedFormats.includes(file.type)) {\n      // continue\n    } else {\n      // Fallback: extension-based validation\n      const lowerName = file.name.toLowerCase()\n      const hasValidExt = this.supportedExtensions.some(ext => lowerName.endsWith(ext))\n      if (!hasValidExt) {\n        console.warn(`Unsupported file type: ${file.type || 'unknown'} for file: ${file.name}`)\n        return false\n      }\n    }\n\n    // Size check\n    if (file.size > this.maxFileSize) {\n      console.warn(`File too large: ${file.name} (${(file.size / 1024 / 1024).toFixed(2)}MB)`)\n      return false\n    }\n\n    return true\n  }\n\n  private async processFile(file: File): Promise<DatabaseTrack | null> {\n    try {\n      try { (window as any).log?.info?.(`processFile start: ${file.name} (${file.type || 'unknown'}, ${file.size} bytes)`) } catch {}\n      // Update progress to processing\n      try { this.updateProgress(file, 0, 'processing') } catch (e) { try { (window as any).log?.warn?.(`updateProgress processing threw: ${String(e)}`) } catch {} }\n\n      // Extract metadata from filename if possible\n      const metadata = this.extractMetadataFromFilename(file.name)\n      try { (window as any).log?.info?.(`metadata extracted: title='${metadata.title}' artist='${metadata.artist}'`) } catch {}\n      \n      // Electron: skip analysis to avoid codec/decoder crashes; compute later lazily\n      // Use a robust detection (preload exposes fileStore; userAgent contains 'Electron')\n      const isElectron = !!((window as any).fileStore) || ((typeof navigator !== 'undefined' && (navigator.userAgent || '').includes('Electron')))\n      let duration = 0\n      let waveform: number[] = []\n      if (!isElectron) {\n        const analysis = await this.safeAnalyzeAudio(file)\n        try { (window as any).log?.info?.(`analyzed: ${file.name} duration=${analysis.duration}s peaks=${analysis.peaks.length}`) } catch {}\n        duration = analysis.duration\n        waveform = analysis.peaks\n      } else {\n        // In Electron calcolo almeno la durata in modo leggero\n        try {\n          duration = await this.getAudioDuration(file)\n          try { (window as any).log?.info?.(`electron duration computed: ${file.name} => ${duration}s`) } catch {}\n        } catch (_) {\n          try { (window as any).log?.warn?.(`electron duration failed for ${file.name}`) } catch {}\n          duration = 0\n        }\n      }\n      \n      // Create track object\n      const track: Omit<DatabaseTrack, 'id' | 'addedAt' | 'playCount' | 'rating'> = {\n        title: metadata.title,\n        artist: metadata.artist,\n        album: metadata.album,\n        genre: metadata.genre,\n        duration,\n        bpm: metadata.bpm,\n        key: metadata.key,\n        energy: metadata.energy,\n        url: 'idb:pending',\n        waveform\n      }\n\n      // Add to database first (to get trackId), then persist blob with that id and update track\n      try { (window as any).log?.info?.(`about to addTrack for ${file.name}`) } catch {}\n      const trackId = await localDatabase.addTrack(track)\n      try { (window as any).log?.info?.(`track added id=${trackId} for ${file.name}`) } catch {}\n      // On Electron, persist via filesystem to avoid IndexedDB large blob issues\n      const isElectronEnv = !!((window as any).fileStore) || ((typeof navigator !== 'undefined' && (navigator.userAgent || '').includes('Electron')))\n      if (isElectronEnv && (window as any).fileStore?.saveAudio) {\n        try {\n          const buf = await file.arrayBuffer()\n          const saved = await (window as any).fileStore.saveAudio(trackId, file.name, buf)\n          if (saved?.ok && saved.path) {\n            try { (window as any).log?.info?.(`file saved at ${saved.path}`) } catch {}\n            await safeDatabaseOperation(\n              () => localDatabase.updateTrack(trackId, { blobId: trackId, url: `file://${saved.path}`, fileUrl: `file://${saved.path}` }),\n              `updateTrack file path for ${file.name}`\n            )\n            // Also save into IndexedDB to ensure persistence after reload when URL is sanitized to idb:\n            try {\n              await safeDatabaseOperation(\n                () => putBlob(trackId, file),\n                `putBlob for ${file.name}`\n              )\n              try { (window as any).log?.info?.(`also stored in IndexedDB as blobId=${trackId}`) } catch {}\n            } catch (ie) {\n              try { (window as any).log?.warn?.(`failed to store in IndexedDB: ${ie instanceof Error ? ie.message : String(ie)}`) } catch {}\n            }\n          } else {\n            throw new Error(saved?.error || 'saveAudio failed')\n          }\n                  } catch (e) {\n            try { (window as any).log?.warn?.(`saveAudio failed, fallback to idb: ${e instanceof Error ? e.message : String(e)}`) } catch {}\n            await safeDatabaseOperation(\n              () => putBlob(trackId, file),\n              `putBlob fallback for ${file.name}`\n            )\n            await safeDatabaseOperation(\n              () => localDatabase.updateTrack(trackId, { blobId: trackId, url: `idb:${trackId}` }),\n              `updateTrack idb fallback for ${file.name}`\n            )\n          }\n        } else {\n          await safeDatabaseOperation(\n            () => putBlob(trackId, file),\n            `putBlob for ${file.name}`\n          )\n          await safeDatabaseOperation(\n            () => localDatabase.updateTrack(trackId, { blobId: trackId, url: `idb:${trackId}` }),\n            `updateTrack idb for ${file.name}`\n          )\n        }\n      const savedTrack = await localDatabase.getTrack(trackId)\n      \n      if (savedTrack) {\n        this.updateProgress(file, 100, 'completed')\n        return savedTrack\n      }\n\n      return null\n    } catch (error) {\n      console.error(`Error processing file ${file.name}:`, error)\n      try { (window as any).log?.error?.(`processFile error ${file.name}: ${error instanceof Error ? error.message : String(error)}`) } catch {}\n      this.updateProgress(file, 0, 'error', error instanceof Error ? error.message : 'Unknown error')\n      return null\n    }\n  }\n\n  // Analisi audio ottimizzata per browser con timeout moderato\n  private async safeAnalyzeAudio(file: File): Promise<{ duration: number; peaks: number[] }> {\n    try {\n      // Timeout moderato per evitare blocchi\n      const timeoutPromise = new Promise<never>((_, reject) => {\n        setTimeout(() => reject(new Error('Audio analysis timeout')), 10000) // 10 secondi per waveform completi\n      })\n\n      const analysisPromise = this.performAudioAnalysis(file)\n      \n      const result = await Promise.race([analysisPromise, timeoutPromise])\n      return result\n    } catch (err) {\n      // Fallback veloce senza analisi\n      return { duration: 0, peaks: [] }\n    }\n  }\n\n  // Analisi audio effettiva con waveform completi\n  private async performAudioAnalysis(file: File): Promise<{ duration: number; peaks: number[] }> {\n    try {\n      const arrayBuffer = await file.arrayBuffer()\n      const AudioCtx = (window as any).AudioContext || (window as any).webkitAudioContext\n      const ac = new AudioCtx()\n      \n      try {\n        const audioBuffer: AudioBuffer = await ac.decodeAudioData(arrayBuffer)\n        const duration = Number.isFinite(audioBuffer.duration) ? Math.round(audioBuffer.duration) : 0\n        \n        // Waveform COMPLETI per qualità audio (200 campioni)\n        const peaks = this.buildPeaksFromChannel(audioBuffer.getChannelData(0), 200)\n        \n        try { \n          if ((ac as any).state !== 'closed') ac.close() \n        } catch (closeError) {\n          // Ignora errori di chiusura\n        }\n        \n        return { duration, peaks }\n      } catch (decodeError) {\n        try { \n          if ((ac as any).state !== 'closed') ac.close() \n        } catch (closeError) {\n          // Ignora errori di chiusura\n        }\n        throw decodeError\n      }\n    } catch (err) {\n      return { duration: 0, peaks: [] }\n    }\n  }\n\n  private buildPeaksFromChannel(channelData: Float32Array | null, numSamples = 200): number[] {\n    if (!channelData || channelData.length === 0) return []\n    const blockSize = Math.max(1, Math.floor(channelData.length / numSamples))\n    const peaks: number[] = []\n    for (let i = 0; i < numSamples; i++) {\n      const start = i * blockSize\n      const end = Math.min(start + blockSize, channelData.length)\n      let max = 0\n      for (let j = start; j < end; j++) {\n        const v = Math.abs(channelData[j])\n        if (v > max) max = v\n      }\n      peaks.push(Math.min(1, max))\n    }\n    return peaks\n  }\n\n  // Waveform ottimizzato per performance\n  private async generateWaveformPeaks(file: File, numSamples = 200): Promise<number[]> {\n    try {\n      const arrayBuffer = await file.arrayBuffer()\n      const AudioCtx = (window as any).AudioContext || (window as any).webkitAudioContext\n      const ac = new AudioCtx()\n      \n      try {\n        const audioBuffer = await ac.decodeAudioData(arrayBuffer)\n        const channelData = audioBuffer.getChannelData(0)\n        const blockSize = Math.floor(channelData.length / numSamples)\n        const peaks: number[] = []\n        \n        // Campionamento completo per qualità audio\n        for (let i = 0; i < numSamples; i++) {\n          const start = i * blockSize\n          const end = Math.min(start + blockSize, channelData.length)\n          let max = 0\n          \n          // Campionamento completo per waveform di qualità\n          for (let j = start; j < end; j++) {\n            const v = Math.abs(channelData[j])\n            if (v > max) max = v\n          }\n          peaks.push(Math.min(1, max))\n        }\n        \n        try { \n          if ((ac as any).state !== 'closed') ac.close() \n        } catch (closeError) {\n          // Ignora errori di chiusura\n        }\n        \n        return peaks\n      } catch (decodeError) {\n        try { \n          if ((ac as any).state !== 'closed') ac.close() \n        } catch (closeError) {\n          // Ignora errori di chiusura\n        }\n        return []\n      }\n    } catch (err) {\n      return []\n    }\n  }\n\n  // Calcolo durata veloce per file grandi\n  private async getAudioDurationFast(file: File): Promise<number> {\n    return new Promise((resolve) => {\n      const audio = new Audio()\n      const objectUrl = URL.createObjectURL(file)\n      \n      const cleanup = () => {\n        try {\n          URL.revokeObjectURL(objectUrl)\n        } catch (cleanupError) {\n          // Ignora errori di cleanup\n        }\n      }\n      \n      // Timeout ultra-aggressivo per file grandi\n      const timeout = setTimeout(() => {\n        cleanup()\n        resolve(0)\n      }, 3000) // Solo 3 secondi per file grandi\n      \n      audio.onloadedmetadata = () => {\n        clearTimeout(timeout)\n        try {\n          const duration = Math.round(audio.duration)\n          cleanup()\n          resolve(Number.isFinite(duration) ? duration : 0)\n        } catch (metadataError) {\n          cleanup()\n          resolve(0)\n        }\n      }\n      \n      audio.onerror = () => {\n        clearTimeout(timeout)\n        cleanup()\n        resolve(0)\n      }\n      \n      try {\n        audio.src = objectUrl\n      } catch (srcError) {\n        clearTimeout(timeout)\n        cleanup()\n        resolve(0)\n      }\n    })\n  }\n\n  // Waveform sintetico per file troppo grandi\n  private generateSyntheticWaveform(duration: number): number[] {\n    const numSamples = 100\n    const peaks: number[] = []\n    \n    for (let i = 0; i < numSamples; i++) {\n      // Genera pattern sintetico basato sulla durata\n      const time = (i / numSamples) * duration\n      const pattern = Math.sin(time * 0.1) * 0.5 + 0.5\n      peaks.push(Math.min(1, Math.max(0, pattern)))\n    }\n    \n    return peaks\n  }\n\n  private extractMetadataFromFilename(filename: string): AudioMetadata {\n    // Remove file extension\n    const nameWithoutExt = filename.replace(/\\.[^/.]+$/, '')\n    \n    // Try to parse common filename patterns\n    // Pattern: \"Artist - Title\" or \"Artist - Title (Album)\"\n    const artistTitleMatch = nameWithoutExt.match(/^(.+?)\\s*-\\s*(.+?)(?:\\s*\\((.+?)\\))?$/)\n    \n    if (artistTitleMatch) {\n      return {\n        title: artistTitleMatch[2].trim(),\n        artist: artistTitleMatch[1].trim(),\n        album: artistTitleMatch[3]?.trim(),\n        genre: this.detectGenreFromFilename(nameWithoutExt),\n        duration: 0, // Will be set later\n        energy: this.detectEnergyFromFilename(nameWithoutExt)\n      }\n    }\n\n    // Pattern: \"Title - Artist\"\n    const titleArtistMatch = nameWithoutExt.match(/^(.+?)\\s*-\\s*(.+?)$/)\n    if (titleArtistMatch) {\n      return {\n        title: titleArtistMatch[1].trim(),\n        artist: titleArtistMatch[2].trim(),\n        genre: this.detectGenreFromFilename(nameWithoutExt),\n        duration: 0,\n        energy: this.detectEnergyFromFilename(nameWithoutExt)\n      }\n    }\n\n    // Fallback: use filename as title\n    return {\n      title: nameWithoutExt,\n      artist: 'Unknown Artist',\n      genre: this.detectGenreFromFilename(nameWithoutExt),\n      duration: 0,\n      energy: this.detectEnergyFromFilename(nameWithoutExt)\n    }\n  }\n\n  private detectGenreFromFilename(filename: string): string {\n    const lowerFilename = filename.toLowerCase()\n    \n    // Common genre keywords\n    const genreKeywords: { [key: string]: string[] } = {\n      'Electronic': ['electronic', 'edm', 'techno', 'house', 'trance', 'dubstep', 'drum', 'bass'],\n      'Rock': ['rock', 'metal', 'punk', 'grunge', 'alternative'],\n      'Pop': ['pop', 'pop-rock', 'indie-pop'],\n      'Hip Hop': ['hip-hop', 'rap', 'trap', 'r&b'],\n      'Jazz': ['jazz', 'blues', 'soul', 'funk'],\n      'Classical': ['classical', 'orchestra', 'symphony'],\n      'Country': ['country', 'folk', 'bluegrass'],\n      'Reggae': ['reggae', 'dub', 'ska']\n    }\n\n    for (const [genre, keywords] of Object.entries(genreKeywords)) {\n      if (keywords.some(keyword => lowerFilename.includes(keyword))) {\n        return genre\n      }\n    }\n\n    return 'Other'\n  }\n\n  private detectEnergyFromFilename(filename: string): 'low' | 'medium' | 'high' {\n    const lowerFilename = filename.toLowerCase()\n    \n    // High energy keywords\n    if (lowerFilename.includes('fast') || lowerFilename.includes('upbeat') || \n        lowerFilename.includes('energetic') || lowerFilename.includes('intense')) {\n      return 'high'\n    }\n    \n    // Low energy keywords\n    if (lowerFilename.includes('slow') || lowerFilename.includes('chill') || \n        lowerFilename.includes('ambient') || lowerFilename.includes('relaxing')) {\n      return 'low'\n    }\n    \n    return 'medium'\n  }\n\n  private async getAudioDuration(file: File): Promise<number> {\n    return new Promise((resolve) => {\n      const audio = new Audio()\n      const objectUrl = URL.createObjectURL(file)\n      \n      const cleanup = () => {\n        try {\n          URL.revokeObjectURL(objectUrl)\n        } catch (cleanupError) {\n          console.warn(`Failed to revoke object URL for ${file.name}:`, cleanupError)\n        }\n      }\n      \n      audio.onloadedmetadata = () => {\n        try {\n          const duration = Math.round(audio.duration)\n          cleanup()\n          resolve(Number.isFinite(duration) ? duration : 0)\n        } catch (metadataError) {\n          console.warn(`Failed to get metadata for ${file.name}:`, metadataError)\n          cleanup()\n          resolve(0)\n        }\n      }\n      \n      audio.onerror = (error) => {\n        console.warn(`Audio error for ${file.name}:`, error)\n        cleanup()\n        resolve(0) // Default duration if we can't get it\n      }\n      \n      // Timeout di sicurezza per evitare che l'operazione si blocchi\n      const timeout = setTimeout(() => {\n        cleanup()\n        resolve(0)\n      }, 5000) // Ridotto a 5 secondi per performance\n      \n      audio.onloadedmetadata = () => {\n        clearTimeout(timeout)\n        try {\n          const duration = Math.round(audio.duration)\n          cleanup()\n          resolve(Number.isFinite(duration) ? duration : 0)\n        } catch (metadataError) {\n          console.warn(`Failed to get metadata for ${file.name}:`, metadataError)\n          cleanup()\n          resolve(0)\n        }\n      }\n      \n      audio.onerror = (error) => {\n        clearTimeout(timeout)\n        console.warn(`Audio error for ${file.name}:`, error)\n        cleanup()\n        resolve(0)\n      }\n      \n      try {\n        audio.src = objectUrl\n      } catch (srcError) {\n        console.warn(`Failed to set audio src for ${file.name}:`, srcError)\n        clearTimeout(timeout)\n        cleanup()\n        resolve(0)\n      }\n    })\n  }\n\n  // Metodo IBRIDO per calcolare durata (Browser + Electron)\n  private async getAudioDurationHybrid(file: File): Promise<number> {\n    try {\n      console.log(`🔍 [DURATION] Calcolo durata ibrido per: ${file.name}`)\n      \n      // Controlla se siamo in Electron\n      const isElectron = !!((window as any).fileStore) || \n                         ((typeof navigator !== 'undefined' && (navigator.userAgent || '').includes('Electron')))\n      \n      if (isElectron) {\n        // In Electron, usa FFmpeg se disponibile\n        try {\n          console.log(`🎯 [DURATION] Tentativo FFmpeg in Electron per: ${file.name}`)\n          \n          // Per ora, fallback alla stima basata su dimensione\n          // TODO: Implementare FFmpeg nativo in Electron\n          const estimatedBitrate = 128000 // 128 kbps medio\n          const estimatedDuration = (file.size * 8) / estimatedBitrate\n          \n          console.log(`📊 [DURATION] Durata stimata Electron per ${file.name}: ${Math.round(estimatedDuration)}s`)\n          return Math.round(estimatedDuration)\n          \n        } catch (electronError) {\n          console.warn(`⚠️ [DURATION] FFmpeg Electron fallito per ${file.name}:`, electronError)\n        }\n      }\n      \n      // Nel browser, usa HTML5 Audio (ma con gestione memoria intelligente)\n      let fileUrl: string | undefined\n      try {\n        console.log(`🌐 [DURATION] Tentativo HTML5 Audio nel browser per: ${file.name}`)\n        \n        // Crea URL temporaneo\n        fileUrl = URL.createObjectURL(file)\n        \n        // Crea oggetto Audio con timeout\n        const audio = new Audio()\n        audio.preload = 'metadata' // Carica solo metadata, non tutto l'audio\n        \n        // Promise con timeout per evitare blocchi\n        const durationPromise = new Promise<number>((resolve, reject) => {\n          const timeout = setTimeout(() => {\n            reject(new Error('Timeout caricamento metadata'))\n          }, 10000) // 10 secondi di timeout\n          \n          audio.addEventListener('loadedmetadata', () => {\n            clearTimeout(timeout)\n            const duration = audio.duration\n            if (isFinite(duration) && duration > 0) {\n              resolve(duration)\n            } else {\n              reject(new Error('Durata non valida'))\n            }\n          })\n          \n          audio.addEventListener('error', (e) => {\n            clearTimeout(timeout)\n            reject(new Error(`Errore caricamento audio: ${e}`))\n          })\n          \n          // Imposta la sorgente\n          audio.src = fileUrl!\n        })\n        \n        // Attendi la durata\n        const duration = await durationPromise\n        \n        // Pulisci immediatamente\n        URL.revokeObjectURL(fileUrl)\n        audio.src = ''\n        audio.load() // Forza pulizia\n        \n        console.log(`✅ [DURATION] Durata HTML5 Audio per ${file.name}: ${Math.round(duration)}s`)\n        return Math.round(duration)\n        \n      } catch (audioError) {\n        console.warn(`⚠️ [DURATION] HTML5 Audio fallito per ${file.name}:`, audioError)\n        \n        // Pulisci comunque\n        try {\n          if (fileUrl) {\n            URL.revokeObjectURL(fileUrl)\n          }\n        } catch {}\n      }\n      \n      // Fallback finale: durata stimata basata sulla dimensione\n      const estimatedBitrate = 128000 // 128 kbps medio\n      const estimatedDuration = (file.size * 8) / estimatedBitrate\n      \n      console.log(`📊 [DURATION] Durata fallback per ${file.name}: ${Math.round(estimatedDuration)}s`)\n      return Math.round(estimatedDuration)\n      \n    } catch (error) {\n      console.warn(`❌ [DURATION] Errore calcolo durata ibrido per ${file.name}:`, error)\n      \n      // Fallback finale: durata stimata\n      const estimatedBitrate = 128000\n      const estimatedDuration = (file.size * 8) / estimatedBitrate\n      return Math.round(estimatedDuration)\n    }\n  }\n\n  private updateProgress(file: File, progress: number, status: UploadProgress['status'], error?: string) {\n    if (this.onProgress) {\n      this.onProgress({\n        file,\n        progress,\n        status,\n        error\n      })\n    }\n  }\n\n  // Batch upload with progress tracking\n  async uploadWithProgress(files: FileList | File[]): Promise<{\n    tracks: DatabaseTrack[]\n    errors: string[]\n  }> {\n    const fileArray = Array.from(files)\n    const validFiles = fileArray.filter(file => this.isValidFile(file))\n    \n    const tracks: DatabaseTrack[] = []\n    const errors: string[] = []\n    \n    for (let i = 0; i < validFiles.length; i++) {\n      const file = validFiles[i]\n      const progress = Math.round(((i + 1) / validFiles.length) * 100)\n      \n      try {\n        this.updateProgress(file, progress, 'uploading')\n        const track = await this.processFile(file)\n        \n        if (track) {\n          try { (window as any).log?.info?.(`Uploaded track ${track.id} (${file.name}) ok`) } catch {}\n          tracks.push(track)\n        }\n      } catch (error) {\n        const errorMsg = `Failed to upload ${file.name}: ${error instanceof Error ? error.message : 'Unknown error'}`\n        try { (window as any).log?.error?.(errorMsg) } catch {}\n        errors.push(errorMsg)\n        this.updateProgress(file, 0, 'error', errorMsg)\n      }\n    }\n    \n    return { tracks, errors }\n  }\n\n  // Validate files before upload\n  validateFiles(files: FileList | File[]): {\n    valid: File[]\n    invalid: { file: File; reason: string }[]\n  } {\n    const fileArray = Array.from(files)\n    const valid: File[] = []\n    const invalid: { file: File; reason: string }[] = []\n    \n    fileArray.forEach(file => {\n      const lowerName = file.name.toLowerCase()\n      const hasValidExt = this.supportedExtensions.some(ext => lowerName.endsWith(ext))\n      if (!file.type && !hasValidExt) {\n        invalid.push({ file, reason: 'Unsupported file format' })\n      } else if (file.type && !this.supportedFormats.includes(file.type) && !hasValidExt) {\n        invalid.push({ file, reason: 'Unsupported file format' })\n      } else if (file.size > this.maxFileSize) {\n        invalid.push({ file, reason: 'File too large' })\n      } else {\n        valid.push(file)\n      }\n    })\n    \n    return { valid, invalid }\n  }\n\n  // Get supported formats\n  getSupportedFormats(): string[] {\n    return [...this.supportedFormats]\n  }\n\n  // Get max file size in MB\n  getMaxFileSizeMB(): number {\n    return this.maxFileSize / 1024 / 1024\n  }\n\n  // Clean up object URLs\n  cleanupObjectUrls(tracks: DatabaseTrack[]) {\n    tracks.forEach(track => {\n      if (track.url.startsWith('blob:')) {\n        URL.revokeObjectURL(track.url)\n      }\n    })\n  }\n\n  // Forza garbage collection e pulizia memoria\n  private forceMemoryCleanup() {\n    try {\n      // Forza garbage collection se disponibile\n      if ('gc' in window) {\n        (window as any).gc()\n      }\n      \n      // Pulisci eventuali riferimenti deboli\n      if ('WeakRef' in window) {\n        // Forza ciclo di garbage collection\n        for (let i = 0; i < 1000; i++) {\n          new (window as any).WeakRef({})\n        }\n      }\n      \n      // Pausa breve per permettere al sistema di \"respirare\"\n      return new Promise(resolve => setTimeout(resolve, 50))\n    } catch (error) {\n      // Ignora errori di cleanup\n      return Promise.resolve()\n    }\n  }\n\n  // Metodo ultra-radicale per processare file senza alcuna analisi audio\n  async processFileOptimized(file: File, skipWaveformGeneration: boolean = false): Promise<DatabaseTrack | null> {\n    try {\n      console.log(`🚀 [FILE] Inizio processamento: ${file.name} (${file.size} bytes)`)\n      \n      // Update progress to processing\n      try { \n        this.updateProgress(file, 0, 'processing') \n        console.log(`📊 [FILE] Progresso aggiornato per: ${file.name}`)\n      } catch (e) { \n        console.warn(`⚠️ [FILE] Errore aggiornamento progresso: ${file.name}`, e)\n      }\n\n      // Extract metadata from filename if possible\n      console.log(`🔍 [FILE] Estrazione metadata per: ${file.name}`)\n      const metadata = this.extractMetadataFromFilename(file.name)\n      console.log(`✅ [FILE] Metadata estratti: ${file.name} - Title: \"${metadata.title}\", Artist: \"${metadata.artist}\"`)\n      \n      // IMPORT OTTIMIZZATO: Durata ultra-leggera + metadata\n      let duration = 0\n      let waveform: number[] = []\n      \n      // Calcola durata con metodo IBRIDO (Browser + Electron)\n      try {\n        duration = await this.getAudioDurationHybrid(file)\n        console.log(`✅ [FILE] Durata calcolata ibrida: ${file.name} - ${duration}s`)\n      } catch (durationError) {\n        console.warn(`⚠️ [FILE] Errore calcolo durata ibrida per ${file.name}:`, durationError)\n        duration = 0\n      }\n      \n      // Waveform vuoto - verrà generato on-demand quando aggiunto alle playlist\n      console.log(`⏭️ [FILE] Waveform saltato per import veloce: ${file.name}`)\n\n      // Create track object\n      console.log(`📝 [FILE] Creazione oggetto track per: ${file.name}`)\n      const track: Omit<DatabaseTrack, 'id' | 'addedAt' | 'playCount' | 'rating'> = {\n        title: metadata.title,\n        artist: metadata.artist,\n        album: metadata.album,\n        genre: metadata.genre,\n        duration: duration, // Calcolato con metodo ibrido\n        bpm: metadata.bpm,\n        key: metadata.key,\n        energy: metadata.energy,\n        url: '',\n        blobId: undefined,\n        fileUrl: undefined,\n        waveform: waveform // Sempre vuoto - generato dopo se necessario\n      }\n      \n      console.log(`✅ [FILE] Oggetto track creato per: ${file.name}`)\n\n      // Add to database first (to get trackId), then persist blob with that id and update track\n      try { (window as any).log?.info?.(`about to addTrack for ${file.name}`) } catch {}\n      \n      let trackId: string\n      try {\n        trackId = await safeDatabaseOperation(\n          () => localDatabase.addTrack(track),\n          `addTrack for ${file.name}`\n        )\n        try { (window as any).log?.info?.(`track added id=${trackId} for ${file.name}`) } catch {}\n      } catch (dbError) {\n        console.error(`Failed to add track to database for ${file.name}:`, dbError)\n        throw new Error(`Database error: ${dbError instanceof Error ? dbError.message : 'Unknown database error'}`)\n      }\n      \n      // On Electron, persist via filesystem to avoid IndexedDB large blob issues\n      const isElectronEnv = !!((window as any).fileStore) || ((typeof navigator !== 'undefined' && (navigator.userAgent || '').includes('Electron')))\n      \n      try {\n        if (isElectronEnv && (window as any).fileStore?.saveAudio) {\n          try {\n            const buf = await file.arrayBuffer()\n            const saved = await (window as any).fileStore.saveAudio(trackId, file.name, buf)\n            if (saved?.ok && saved.path) {\n              try { (window as any).log?.info?.(`file saved at ${saved.path}`) } catch {}\n              await localDatabase.updateTrack(trackId, { blobId: trackId, url: `file://${saved.path}`, fileUrl: `file://${saved.path}` })\n              // Also save into IndexedDB to ensure persistence after reload when URL is sanitized to idb:\n              try {\n                await putBlob(trackId, file)\n                try { (window as any).log?.info?.(`also stored in IndexedDB as blobId=${trackId}`) } catch {}\n              } catch (ie) {\n                try { (window as any).log?.warn?.(`failed to store in IndexedDB: ${ie instanceof Error ? ie.message : String(ie)}`) } catch {}\n              }\n            } else {\n              throw new Error(saved?.error || 'saveAudio failed')\n            }\n          } catch (e) {\n            try { (window as any).log?.warn?.(`saveAudio failed, fallback to idb: ${e instanceof Error ? e.message : String(e)}`) } catch {}\n            await putBlob(trackId, file)\n            await localDatabase.updateTrack(trackId, { blobId: trackId, url: `idb:${trackId}` })\n          }\n        } else {\n          await putBlob(trackId, file)\n          await localDatabase.updateTrack(trackId, { blobId: trackId, url: `idb:${trackId}` })\n        }\n      } catch (storageError) {\n        console.error(`Failed to store audio data for ${file.name}:`, storageError)\n        // Rimuovi il track dal database se non riusciamo a salvare l'audio\n        try {\n          await safeDatabaseOperation(\n            () => localDatabase.deleteTrack(trackId),\n            `deleteTrack cleanup for ${file.name}`\n          )\n        } catch (deleteError) {\n          console.error(`Failed to cleanup track ${trackId} after storage error:`, deleteError)\n        }\n        throw new Error(`Storage error: ${storageError instanceof Error ? storageError.message : 'Unknown storage error'}`)\n      }\n      \n      let savedTrack: DatabaseTrack | null = null\n      try {\n        savedTrack = await safeDatabaseOperation(\n          () => localDatabase.getTrack(trackId),\n          `getTrack for ${file.name}`\n        )\n      } catch (getError) {\n        console.error(`Failed to get saved track ${trackId} for ${file.name}:`, getError)\n        throw new Error(`Failed to retrieve saved track: ${getError instanceof Error ? getError.message : 'Unknown error'}`)\n      }\n      \n      if (savedTrack) {\n        try {\n          this.updateProgress(file, 100, 'completed')\n        } catch (progressError) {\n          console.warn(`Failed to update progress for ${file.name}:`, progressError)\n        }\n        return savedTrack\n      }\n\n      return null\n    } catch (error) {\n      console.error(`Error processing file ${file.name}:`, error)\n      try { (window as any).log?.error?.(`processFileOptimized error ${file.name}: ${error instanceof Error ? error.message : String(error)}`) } catch {}\n      this.updateProgress(file, 0, 'error', error instanceof Error ? error.message : 'Unknown error')\n      return null\n    }\n  }\n}\n\nexport default FileUploadManager\n","import React, { useState, useEffect, useCallback } from 'react'\r\nimport { HardDrive, Cpu, Activity, AlertTriangle, CheckCircle } from 'lucide-react'\r\n\r\ninterface MemoryInfo {\r\n  used: number\r\n  total: number\r\n  percentage: number\r\n  status: 'low' | 'medium' | 'high' | 'critical'\r\n}\r\n\r\ninterface MemoryManagerProps {\r\n  isImporting: boolean\r\n  totalFiles: number\r\n  completedFiles: number\r\n  onMemoryWarning: () => void\r\n}\r\n\r\nconst MemoryManager: React.FC<MemoryManagerProps> = ({ \r\n  isImporting, \r\n  totalFiles, \r\n  completedFiles, \r\n  onMemoryWarning \r\n}) => {\r\n  const [memoryInfo, setMemoryInfo] = useState<MemoryInfo>({\r\n    used: 0,\r\n    total: 0,\r\n    percentage: 0,\r\n    status: 'low'\r\n  })\r\n  const [showDetails, setShowDetails] = useState(false)\r\n  const [memoryHistory, setMemoryHistory] = useState<number[]>([])\r\n\r\n  // Simula monitoraggio memoria (in un'app reale useresti Performance API o Electron APIs)\r\n  const getMemoryInfo = useCallback((): MemoryInfo => {\r\n    if ('memory' in performance) {\r\n      const memory = (performance as any).memory\r\n      const used = memory.usedJSHeapSize\r\n      const total = memory.totalJSHeapSize\r\n      const percentage = (used / total) * 100\r\n      \r\n      let status: MemoryInfo['status'] = 'low'\r\n      if (percentage > 90) status = 'critical'  // Aumentato da 80% a 90%\r\n      else if (percentage > 75) status = 'high'  // Aumentato da 60% a 75%\r\n      else if (percentage > 50) status = 'medium' // Aumentato da 40% a 50%\r\n      \r\n      return { used, total, percentage, status }\r\n    }\r\n    \r\n    // Fallback per browser che non supportano Performance Memory API\r\n    return {\r\n      used: Math.random() * 100 * 1024 * 1024, // Simula uso memoria\r\n      total: 100 * 1024 * 1024, // Simula 100MB totali\r\n      percentage: Math.random() * 100,\r\n      status: 'low'\r\n    }\r\n  }, [])\r\n\r\n  // Monitora memoria durante import\r\n  useEffect(() => {\r\n    if (!isImporting) return\r\n\r\n    const interval = setInterval(() => {\r\n      const info = getMemoryInfo()\r\n      setMemoryInfo(info)\r\n      \r\n      // Aggiungi alla cronologia\r\n      setMemoryHistory(prev => {\r\n        const newHistory = [...prev, info.percentage]\r\n        if (newHistory.length > 20) newHistory.shift() // Mantieni solo ultimi 20 valori\r\n        return newHistory\r\n      })\r\n      \r\n      // Avvisa se memoria critica\r\n      if (info.status === 'critical') {\r\n        handleMemoryWarning()\r\n        console.warn('⚠️ Memoria critica durante import!')\r\n      }\r\n    }, 3000) // Controlla ogni 3 secondi per ridurre overhead\r\n\r\n    return () => clearInterval(interval)\r\n  }, [isImporting, getMemoryInfo, onMemoryWarning])\r\n\r\n  // Calcola raccomandazioni basate su memoria e numero file\r\n  const getRecommendations = useCallback((): string[] => {\r\n    const recommendations: string[] = []\r\n    \r\n    if (memoryInfo.status === 'critical') {\r\n      recommendations.push('Memoria elevata. L\\'import continuerà automaticamente con ottimizzazioni')\r\n    } else if (memoryInfo.status === 'high') {\r\n      recommendations.push('Memoria moderata. L\\'import procede normalmente')\r\n    }\r\n    \r\n    if (totalFiles > 500) {\r\n      recommendations.push('Libreria grande. Ottimizzazioni automatiche attive')\r\n    }\r\n    \r\n    if (totalFiles > 1000) {\r\n      recommendations.push('Libreria molto grande. Processamento ottimizzato in corso')\r\n    }\r\n    \r\n    return recommendations\r\n  }, [memoryInfo.status, totalFiles])\r\n\r\n  // Gestisce warning di memoria con pulizia automatica\r\n  const handleMemoryWarning = useCallback(() => {\r\n    if (memoryInfo.status === 'critical') {\r\n      // Memoria critica: pulizia aggressiva\r\n      console.warn('🚨 [MEMORY] Memoria critica rilevata! Pulizia aggressiva...')\r\n      \r\n      // Forza garbage collection se disponibile\r\n      try {\r\n        if ('gc' in window) {\r\n          (window as any).gc()\r\n          console.log('🧹 [MEMORY] Garbage collection forzato per memoria critica')\r\n        }\r\n      } catch (error) {\r\n        console.warn('Failed to force garbage collection:', error)\r\n      }\r\n      \r\n      // Pausa per permettere al sistema di \"respirare\"\r\n      setTimeout(() => {\r\n        handleMemoryWarning()\r\n      }, 1000)\r\n    } else if (memoryInfo.status === 'high') {\r\n      // Memoria elevata: pulizia preventiva\r\n      console.warn('⚠️ [MEMORY] Memoria elevata rilevata. Pulizia preventiva...')\r\n      \r\n      try {\r\n        if ('gc' in window) {\r\n          (window as any).gc()\r\n          console.log('🧹 [MEMORY] Garbage collection preventivo per memoria elevata')\r\n        }\r\n      } catch (error) {\r\n        console.warn('Failed to force garbage collection:', error)\r\n      }\r\n      \r\n      // Pausa più breve per memoria elevata\r\n      setTimeout(() => {\r\n        handleMemoryWarning()\r\n      }, 500)\r\n    } else if (memoryInfo.status === 'medium') {\r\n      // Memoria moderata: pulizia leggera\r\n      console.log('ℹ️ [MEMORY] Memoria moderata. Pulizia leggera...')\r\n      \r\n      try {\r\n        if ('gc' in window) {\r\n          (window as any).gc()\r\n          console.log('🧹 [MEMORY] Garbage collection leggero per memoria moderata')\r\n        }\r\n      } catch (error) {\r\n        console.warn('Failed to force garbage collection:', error)\r\n      }\r\n    }\r\n  }, [memoryInfo.status])\r\n\r\n  const formatBytes = (bytes: number): string => {\r\n    if (bytes === 0) return '0 B'\r\n    const k = 1024\r\n    const sizes = ['B', 'KB', 'MB', 'GB']\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k))\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]\r\n  }\r\n\r\n  const getStatusColor = (status: MemoryInfo['status']): string => {\r\n    switch (status) {\r\n      case 'low': return 'text-green-500'\r\n      case 'medium': return 'text-yellow-500'\r\n      case 'high': return 'text-orange-500'\r\n      case 'critical': return 'text-red-500'\r\n      default: return 'text-gray-500'\r\n    }\r\n  }\r\n\r\n  const getStatusIcon = (status: MemoryInfo['status']) => {\r\n    switch (status) {\r\n      case 'low': return <CheckCircle className=\"w-4 h-4 text-green-500\" />\r\n      case 'medium': return <Activity className=\"w-4 h-4 text-yellow-500\" />\r\n      case 'high': return <AlertTriangle className=\"w-4 h-4 text-orange-500\" />\r\n      case 'critical': return <AlertTriangle className=\"w-4 h-4 text-red-500\" />\r\n      default: return <Activity className=\"w-4 h-4 text-gray-500\" />\r\n    }\r\n  }\r\n\r\n  if (!isImporting) return null\r\n\r\n  return (\r\n    <div className=\"memory-manager bg-dj-primary rounded-lg p-4 mt-4\">\r\n      <div className=\"flex items-center justify-between mb-3\">\r\n                       <h4 className=\"text-sm font-medium text-white flex items-center space-x-2\">\r\n                 <HardDrive className=\"w-4 h-4\" />\r\n                 <span>Gestione Memoria</span>\r\n               </h4>\r\n        <button\r\n          onClick={() => setShowDetails(!showDetails)}\r\n          className=\"text-xs text-dj-light/60 hover:text-dj-light\"\r\n        >\r\n          {showDetails ? 'Nascondi' : 'Dettagli'}\r\n        </button>\r\n      </div>\r\n\r\n      {/* Barra memoria */}\r\n      <div className=\"mb-3\">\r\n        <div className=\"flex items-center justify-between text-xs text-dj-light/60 mb-1\">\r\n          <span>Uso Memoria</span>\r\n          <span className={getStatusColor(memoryInfo.status)}>\r\n            {memoryInfo.percentage.toFixed(1)}%\r\n          </span>\r\n        </div>\r\n        <div className=\"w-full bg-dj-secondary rounded-full h-2 overflow-hidden\">\r\n          <div \r\n            className={`h-full transition-all duration-300 ${\r\n              memoryInfo.status === 'critical' ? 'bg-red-500' :\r\n              memoryInfo.status === 'high' ? 'bg-orange-500' :\r\n              memoryInfo.status === 'medium' ? 'bg-yellow-500' : 'bg-green-500'\r\n            }`}\r\n            style={{ width: `${Math.min(memoryInfo.percentage, 100)}%` }}\r\n          />\r\n        </div>\r\n        <div className=\"flex items-center justify-between text-xs text-dj-light/60 mt-1\">\r\n          <span>{formatBytes(memoryInfo.used)}</span>\r\n          <span>{formatBytes(memoryInfo.total)}</span>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Stato memoria */}\r\n      <div className=\"flex items-center space-x-2 mb-3\">\r\n        {getStatusIcon(memoryInfo.status)}\r\n        <span className={`text-sm ${getStatusColor(memoryInfo.status)}`}>\r\n          {memoryInfo.status === 'low' && 'Memoria OK'}\r\n          {memoryInfo.status === 'medium' && 'Memoria Moderata'}\r\n          {memoryInfo.status === 'high' && 'Memoria Elevata'}\r\n          {memoryInfo.status === 'critical' && 'Memoria Critica!'}\r\n        </span>\r\n      </div>\r\n\r\n      {/* Dettagli avanzati */}\r\n      {showDetails && (\r\n        <div className=\"space-y-3\">\r\n          {/* Grafico memoria */}\r\n          {memoryHistory.length > 0 && (\r\n            <div>\r\n              <div className=\"text-xs text-dj-light/60 mb-2\">Andamento Memoria</div>\r\n              <div className=\"flex items-end space-x-1 h-16\">\r\n                {memoryHistory.map((value, index) => (\r\n                  <div\r\n                    key={index}\r\n                                         className={`flex-1 min-w-0 ${\r\n                       value > 90 ? 'bg-red-500' :\r\n                       value > 75 ? 'bg-orange-500' :\r\n                       value > 50 ? 'bg-yellow-500' : 'bg-green-500'\r\n                     } rounded-t transition-all duration-300`}\r\n                    style={{ height: `${value}%` }}\r\n                    title={`${value.toFixed(1)}%`}\r\n                  />\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Statistiche import */}\r\n          <div className=\"grid grid-cols-2 gap-3 text-xs\">\r\n            <div className=\"bg-dj-secondary p-2 rounded\">\r\n              <div className=\"text-dj-light/60\">File Processati</div>\r\n              <div className=\"text-white font-medium\">{completedFiles}</div>\r\n            </div>\r\n            <div className=\"bg-dj-secondary p-2 rounded\">\r\n              <div className=\"text-dj-light/60\">File Totali</div>\r\n              <div className=\"text-white font-medium\">{totalFiles}</div>\r\n            </div>\r\n            <div className=\"bg-dj-secondary p-2 rounded\">\r\n              <div className=\"text-dj-light/60\">Progresso</div>\r\n              <div className=\"text-white font-medium\">\r\n                {((completedFiles / totalFiles) * 100).toFixed(1)}%\r\n              </div>\r\n            </div>\r\n            <div className=\"bg-dj-secondary p-2 rounded\">\r\n              <div className=\"text-dj-light/60\">Rimanenti</div>\r\n              <div className=\"text-white font-medium\">{totalFiles - completedFiles}</div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Raccomandazioni */}\r\n          <div>\r\n            <div className=\"text-xs text-dj-light/60 mb-2\">Raccomandazioni</div>\r\n            <div className=\"space-y-1\">\r\n              {getRecommendations().map((rec, index) => (\r\n                <div key={index} className=\"text-xs text-dj-light/80 flex items-start space-x-2\">\r\n                  <AlertTriangle className=\"w-3 h-3 text-yellow-500 mt-0.5 flex-shrink-0\" />\r\n                  <span>{rec}</span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MemoryManager\r\n","import React, { useState, useRef, useCallback } from 'react'\nimport { FolderOpen, Upload, Music, AlertCircle, CheckCircle, Clock, Settings, Info } from 'lucide-react'\nimport { FileUploadManager } from '../utils/FileUploadManager'\nimport { DatabaseTrack } from '../database/LocalDatabase'\nimport MemoryManager from './MemoryManager'\nimport ErrorBoundary from './ErrorBoundary'\n\n\ninterface FolderImporterProps {\n  onImportComplete: () => void\n}\n\ninterface ImportSettings {\n  batchSize: number\n  delayBetweenBatches: number\n  skipWaveformGeneration: boolean\n  maxConcurrentFiles: number\n}\n\nconst FolderImporter: React.FC<FolderImporterProps> = ({ onImportComplete }) => {\n  const [isImporting, setIsImporting] = useState(false)\n  const [importProgress, setImportProgress] = useState<{ file: string; progress: number; status: 'pending' | 'processing' | 'completed' | 'error' }[]>([])\n  const [totalFiles, setTotalFiles] = useState(0)\n  const [completedFiles, setCompletedFiles] = useState(0)\n  const [showProgress, setShowProgress] = useState(false)\n  const [showSettings, setShowSettings] = useState(false)\n  const [currentBatch, setCurrentBatch] = useState(0)\n  const [totalBatches, setTotalBatches] = useState(0)\n  const [importSettings, setImportSettings] = useState<ImportSettings>({\n    batchSize: 50, // Processa 50 file alla volta\n    delayBetweenBatches: 100, // 100ms di pausa tra batch\n    skipWaveformGeneration: false, // Genera sempre i waveform per qualità audio\n    maxConcurrentFiles: 5 // Massimo 5 file processati contemporaneamente\n  })\n  const folderInputRef = useRef<HTMLInputElement>(null)\n  const abortControllerRef = useRef<AbortController | null>(null)\n  \n  // Crea un singolo FileUploadManager per tutta l'operazione\n  const uploadManagerRef = useRef<FileUploadManager | null>(null)\n\n  // Calcola automaticamente le impostazioni ULTRA-SICURE per stabilità massima\n  const calculateOptimalSettings = useCallback((fileCount: number): ImportSettings => {\n    // STRATEGIA ULTRA-SICURA: Processamento SERIALE per evitare crash\n    if (fileCount <= 5) {\n      // Librerie minuscole\n      return {\n        batchSize: 50, // 50 file per volta per velocità massima\n        delayBetweenBatches: 500, // Pausa di 0.5 secondi\n        skipWaveformGeneration: false, // ABILITA waveform\n        maxConcurrentFiles: 1 // SEMPRE 1 file alla volta\n      }\n    } else if (fileCount <= 100) {\n      // Librerie piccole\n      return {\n        batchSize: 50, // 50 file per volta per velocità massima\n        delayBetweenBatches: 400, // Pausa di 0.4 secondi\n        skipWaveformGeneration: false, // ABILITA waveform\n        maxConcurrentFiles: 1 // SEMPRE 1 file alla volta\n      }\n    } else if (fileCount <= 500) {\n      // Librerie medie\n      return {\n        batchSize: 50, // 50 file per volta per velocità massima\n        delayBetweenBatches: 300, // Pausa di 0.3 secondi\n        skipWaveformGeneration: false, // ABILITA waveform\n        maxConcurrentFiles: 1 // SEMPRE 1 file alla volta\n      }\n    } else if (fileCount <= 1000) {\n      // Librerie grandi\n      return {\n        batchSize: 50, // 50 file per volta per velocità massima\n        delayBetweenBatches: 200, // Pausa di 0.2 secondi\n        skipWaveformGeneration: false, // ABILITA waveform\n        maxConcurrentFiles: 1 // SEMPRE 1 file alla volta\n      }\n    } else {\n      // Librerie enormi\n      return {\n        batchSize: 50, // 50 file per volta per velocità massima\n        delayBetweenBatches: 100, // Pausa di 0.1 secondi\n        skipWaveformGeneration: false, // ABILITA waveform\n        maxConcurrentFiles: 1 // SEMPRE 1 file alla volta\n      }\n    }\n  }, [])\n\n  const handleFolderSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files\n    if (!files || files.length === 0) return\n\n    try {\n      // Calcola impostazioni ottimali\n      const optimalSettings = calculateOptimalSettings(files.length)\n      setImportSettings(optimalSettings)\n\n      setIsImporting(true)\n      setShowProgress(true)\n      setTotalFiles(files.length)\n      setCompletedFiles(0)\n      setCurrentBatch(0)\n\n      // Crea un singolo FileUploadManager per tutta l'operazione\n      uploadManagerRef.current = new FileUploadManager((progress) => {\n        setImportProgress(prev => \n          prev.map(p => \n            p.file === progress.file.name \n              ? { ...p, progress: progress.progress, status: progress.progress === 100 ? 'completed' : 'processing' }\n              : p\n          )\n        )\n      })\n\n      // Filtra solo file audio supportati\n      const audioFiles = Array.from(files).filter(file => {\n        const extension = file.name.toLowerCase().split('.').pop()\n        return ['mp3', 'wav', 'flac', 'aac', 'ogg', 'm4a', 'wma'].includes(extension || '')\n      })\n\n      if (audioFiles.length === 0) {\n        alert('Nessun file audio trovato nella cartella selezionata')\n        setIsImporting(false)\n        setShowProgress(false)\n        return\n      }\n\n      // Inizializza il progresso per ogni file\n      const progress = audioFiles.map(file => ({\n        file: file.name,\n        progress: 0,\n        status: 'pending' as const\n      }))\n      setImportProgress(progress)\n\n      // Calcola numero di batch\n      const batchCount = Math.ceil(audioFiles.length / optimalSettings.batchSize)\n      setTotalBatches(batchCount)\n\n      // Crea abort controller per cancellare l'import se necessario\n      abortControllerRef.current = new AbortController()\n\n            // Carica file in modo SERIALE per stabilità massima\n      const { tracks: newTracks, errors } = await uploadInBatches(\n        audioFiles,\n        optimalSettings\n      )\n      \n      if (newTracks.length > 0) {\n        setCompletedFiles(newTracks.length)\n        // Emetti evento per aggiornare la library\n        window.dispatchEvent(new CustomEvent('djconsole:db-updated'))\n        onImportComplete()\n      }\n\n      if (errors.length > 0) {\n        console.warn(`Import completed with ${errors.length} errors:`, errors)\n        // Aggiorna lo stato degli errori nel progresso\n        setImportProgress(prev => \n          prev.map(p => \n            errors.some(e => e.includes(p.file)) \n              ? { ...p, status: 'error' }\n              : p\n          )\n        )\n      }\n\n      // Mostra riepilogo\n      setTimeout(() => {\n        setShowProgress(false)\n        setIsImporting(false)\n        setImportProgress([])\n        setTotalFiles(0)\n        setCompletedFiles(0)\n        setCurrentBatch(0)\n        setTotalBatches(0)\n      }, 3000)\n\n    } catch (error) {\n      if (error instanceof Error && error.name === 'AbortError') {\n        console.log('Import cancelled by user')\n      } else {\n        console.error('Folder import failed:', error)\n        alert('Errore durante l\\'importazione della cartella: ' + (error instanceof Error ? error.message : 'Errore sconosciuto'))\n      }\n      setIsImporting(false)\n      setShowProgress(false)\n    }\n  }\n\n  // Carica file in batch di 5 per bilanciare velocità e stabilità\n  const uploadInBatches = async (files: File[], settings: ImportSettings): Promise<{ tracks: DatabaseTrack[], errors: string[] }> => {\n    const tracks: DatabaseTrack[] = []\n    const errors: string[] = []\n    \n    console.log(`🚀 [IMPORT] Inizio import in batch di ${settings.batchSize} per ${files.length} file`)\n    \n    // Calcola numero di batch\n    const totalBatches = Math.ceil(files.length / settings.batchSize)\n    \n    for (let batchIndex = 0; batchIndex < totalBatches; batchIndex++) {\n      // Controlla se l'operazione è stata cancellata\n      if (abortControllerRef.current?.signal.aborted) {\n        console.log('📁 [IMPORT] Operazione cancellata dall\\'utente')\n        throw new Error('Operazione cancellata dall\\'utente')\n      }\n      \n      const start = batchIndex * settings.batchSize\n      const end = Math.min(start + settings.batchSize, files.length)\n      const batch = files.slice(start, end)\n      \n      console.log(`📁 [IMPORT] Processando batch ${batchIndex + 1}/${totalBatches} (${batch.length} file)`)\n      \n      // Aggiorna progresso batch\n      setCurrentBatch(batchIndex + 1)\n      \n      // Processa batch corrente in parallelo\n      const batchPromises = batch.map(async (file) => {\n        try {\n          if (!uploadManagerRef.current) {\n            throw new Error('FileUploadManager non inizializzato')\n          }\n          \n          console.log(`⚡ [IMPORT] Inizio processamento: ${file.name}`)\n          const track = await uploadManagerRef.current.processFileOptimized(file, settings.skipWaveformGeneration)\n          \n          if (track) {\n            console.log(`✅ [IMPORT] File completato: ${file.name}`)\n            return track\n          } else {\n            console.warn(`⚠️ [IMPORT] File fallito: ${file.name}`)\n            return null\n          }\n        } catch (error) {\n          const errorMsg = `Failed to process ${file.name}: ${error instanceof Error ? error.message : 'Unknown error'}`\n          errors.push(errorMsg)\n          console.error(`❌ [IMPORT] Errore file: ${file.name}`, error)\n          return null\n        }\n      })\n      \n      // Processa batch in parallelo\n      const batchResults = await Promise.all(batchPromises)\n      const batchTracks = batchResults.filter((track): track is DatabaseTrack => track !== null)\n      \n      tracks.push(...batchTracks)\n      setCompletedFiles(prev => prev + batchTracks.length)\n      \n      // Pausa tra batch per permettere al sistema di \"respirare\"\n      if (batchIndex < totalBatches - 1) {\n        console.log(`⏸️ [BATCH] Pausa di ${settings.delayBetweenBatches}ms dopo batch ${batchIndex + 1}/${totalBatches}`)\n        await new Promise(resolve => setTimeout(resolve, settings.delayBetweenBatches))\n        \n        // Pulizia memoria AGGRESSIVA ogni batch\n        try {\n          console.log(`🧹 [MEMORY] Pulizia memoria dopo batch ${batchIndex + 1}`)\n          \n          // Forza garbage collection se disponibile\n          if ('gc' in window) {\n            (window as any).gc()\n            console.log('✅ [MEMORY] Garbage collection forzato')\n          }\n          \n          // Pausa aggiuntiva per permettere al sistema di \"respirare\"\n          console.log('😴 [MEMORY] Pausa aggiuntiva per recupero memoria...')\n          await new Promise(resolve => setTimeout(resolve, 500))\n          \n          console.log(`✅ [MEMORY] Pulizia memoria completata per batch ${batchIndex + 1}`)\n        } catch (error) {\n          console.warn(`⚠️ [MEMORY] Errore durante pulizia memoria:`, error)\n        }\n      }\n    }\n    \n    console.log(`🎉 [IMPORT] Import in batch completato: ${tracks.length} file, ${errors.length} errori`)\n    return { tracks, errors }\n  }\n\n\n\n  const cancelImport = () => {\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort()\n    }\n  }\n\n  const handleMemoryWarning = () => {\n    // Mostra avviso memoria critica\n    alert('⚠️ Attenzione: Memoria critica rilevata! Considera di fermare l\\'import per evitare crash.')\n  }\n\n  const openFolderSelector = () => {\n    if (folderInputRef.current) {\n      folderInputRef.current.click()\n    }\n  }\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle className=\"w-4 h-4 text-green-500\" />\n      case 'error':\n        return <AlertCircle className=\"w-4 h-4 text-red-500\" />\n      case 'processing':\n        return <Clock className=\"w-4 h-4 text-yellow-500\" />\n      default:\n        return <Clock className=\"w-4 h-4 text-gray-400\" />\n    }\n  }\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'Completato'\n      case 'error':\n        return 'Errore'\n      case 'processing':\n        return 'Elaborazione'\n      default:\n        return 'In attesa'\n    }\n  }\n\n  return (\n    <ErrorBoundary>\n      <div className=\"folder-importer\">\n      {/* Input nascosto per la selezione cartella */}\n      <input\n        ref={folderInputRef}\n        type=\"file\"\n        webkitdirectory=\"\"\n        directory=\"\"\n        multiple\n        onChange={handleFolderSelect}\n        className=\"hidden\"\n        accept=\".mp3,.wav,.flac,.aac,.ogg,.m4a,.wma\"\n        aria-label=\"Seleziona cartella con file audio\"\n      />\n\n      {/* Pulsante per aprire il selettore cartelle */}\n      <button\n        onClick={openFolderSelector}\n        disabled={isImporting}\n        className=\"dj-button flex items-center space-x-2 w-full\"\n      >\n        <FolderOpen className=\"w-4 h-4\" />\n        <span>{isImporting ? 'Importazione in corso...' : 'Seleziona Cartella'}</span>\n      </button>\n\n      {/* Pulsante impostazioni */}\n      <button\n        onClick={() => setShowSettings(!showSettings)}\n        className=\"mt-2 text-sm text-dj-light/60 hover:text-dj-light flex items-center space-x-2\"\n      >\n        <Settings className=\"w-3 h-3\" />\n        <span>Impostazioni Import</span>\n      </button>\n\n      {/* Impostazioni import */}\n      {showSettings && (\n        <div className=\"mt-3 p-3 bg-dj-primary rounded-lg\">\n          <div className=\"space-y-3\">\n            <div>\n              <label className=\"text-sm text-dj-light/80\">Dimensione Batch:</label>\n              <select\n                value={importSettings.batchSize}\n                onChange={(e) => setImportSettings(prev => ({ ...prev, batchSize: Number(e.target.value) }))}\n                className=\"ml-2 bg-dj-secondary text-white text-sm rounded px-2 py-1\"\n                aria-label=\"Dimensione batch per importazione\"\n              >\n                <option value={25}>25 file</option>\n                <option value={50}>50 file</option>\n                <option value={100}>100 file</option>\n              </select>\n            </div>\n            <div>\n              <label className=\"text-sm text-dj-light/80\">Pausa tra Batch (ms):</label>\n              <select\n                value={importSettings.delayBetweenBatches}\n                onChange={(e) => setImportSettings(prev => ({ ...prev, delayBetweenBatches: Number(e.target.value) }))}\n                className=\"ml-2 bg-dj-secondary text-white text-sm rounded px-2 py-1\"\n                aria-label=\"Pausa tra batch per importazione\"\n              >\n                <option value={50}>50ms</option>\n                <option value={100}>100ms</option>\n                <option value={200}>200ms</option>\n              </select>\n            </div>\n            <div className=\"text-sm text-dj-light/80 bg-dj-highlight/20 p-2 rounded border border-dj-highlight/30\">\n              <span className=\"text-dj-highlight\">🎵 Waveform sempre generati per qualità audio ottimale</span>\n            </div>\n            <div>\n              <label className=\"text-sm text-dj-light/80\">File concorrenti:</label>\n              <select\n                value={importSettings.maxConcurrentFiles}\n                onChange={(e) => setImportSettings(prev => ({ ...prev, maxConcurrentFiles: Number(e.target.value) }))}\n                className=\"ml-2 bg-dj-secondary text-white text-sm rounded px-2 py-1\"\n                aria-label=\"Numero di file concorrenti per importazione\"\n              >\n                <option value={3}>3</option>\n                <option value={5}>5</option>\n                <option value={8}>8</option>\n              </select>\n            </div>\n          </div>\n        </div>\n      )}\n\n                            {/* Informazioni import Ottimizzato */}\n              {totalFiles > 0 && (\n            <div className=\"text-xs text-dj-light/60 bg-green-500/20 p-2 rounded border border-green-500/30\">\n              <strong>🚀 Import Ottimizzato (Batch di 50):</strong> \n              <span className=\"text-green-400\">\n                Processamento in batch di {importSettings.batchSize} file con waveform completi e durate accurate. Pausa: {importSettings.delayBetweenBatches}ms tra batch. Performance massima!\n              </span>\n            </div>\n          )}\n\n      {/* Barra di progresso generale */}\n      {isImporting && (\n        <div className=\"mt-3\">\n          <div className=\"flex items-center justify-between text-sm text-dj-light/60 mb-2\">\n            <span>Progresso Import Ottimizzato</span>\n            <span>{completedFiles} / {totalFiles}</span>\n          </div>\n          <div className=\"w-full bg-dj-primary rounded-full h-2 overflow-hidden\">\n            <div \n              className=\"h-full bg-gradient-to-r from-dj-success to-dj-highlight transition-all duration-300\"\n              style={{ width: `${(completedFiles / totalFiles) * 100}%` }}\n            />\n          </div>\n          <div className=\"text-xs text-dj-light/60 mt-1\">\n            Batch: {currentBatch} / {Math.ceil(totalFiles / importSettings.batchSize)} | File: {completedFiles} ({Math.round((completedFiles / totalFiles) * 100)}%)\n          </div>\n        </div>\n      )}\n\n      {/* Pulsante cancella import */}\n      {isImporting && (\n        <button\n          onClick={cancelImport}\n          className=\"mt-3 w-full bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded-lg transition-colors\"\n        >\n          Cancella Import\n        </button>\n      )}\n\n      {/* Dettaglio progresso per file */}\n      {showProgress && (\n        <div className=\"mt-4 max-h-48 overflow-y-auto\">\n          <h4 className=\"text-sm font-medium text-white mb-2\">Dettaglio file:</h4>\n          <div className=\"space-y-2\">\n            {importProgress.map((item, index) => (\n              <div key={index} className=\"flex items-center justify-between p-2 bg-dj-primary rounded-lg\">\n                <div className=\"flex items-center space-x-2 flex-1 min-w-0\">\n                  {getStatusIcon(item.status)}\n                  <span className=\"text-sm text-white truncate\">{item.file}</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-xs text-dj-light/60\">{getStatusText(item.status)}</span>\n                  {item.status === 'processing' && (\n                    <div className=\"w-16 bg-dj-secondary rounded-full h-1 overflow-hidden\">\n                      <div \n                        className=\"h-full bg-dj-highlight transition-all duration-300\"\n                        style={{ width: `${item.progress}%` }}\n                      />\n                    </div>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Gestione memoria per grandi librerie */}\n      <MemoryManager\n        isImporting={isImporting}\n        totalFiles={totalFiles}\n        completedFiles={completedFiles}\n        onMemoryWarning={handleMemoryWarning}\n      />\n      </div>\n    </ErrorBoundary>\n  )\n}\n\nexport default FolderImporter\n","import React, { useState, useEffect } from 'react'\nimport { Search, Filter, X, Music, User, Disc, Clock, Star } from 'lucide-react'\n\ninterface AdvancedSearchProps {\n  filters: SearchFilters\n  onFiltersChange: (filters: SearchFilters) => void\n  availableGenres: string[]\n  availableArtists: string[]\n  availableAlbums: string[]\n}\n\nexport interface SearchFilters {\n  genre: string\n  artist: string\n  album: string\n  minDuration: number\n  maxDuration: number\n  minRating: number\n  maxRating: number\n  minPlayCount: number\n  maxPlayCount: number\n  addedAfter: string\n  addedBefore: string\n}\n\nconst AdvancedSearch: React.FC<AdvancedSearchProps> = ({\n  filters,\n  onFiltersChange,\n  availableGenres,\n  availableArtists,\n  availableAlbums\n}) => {\n  const [showAdvanced, setShowAdvanced] = useState(false)\n  const [currentFilters, setCurrentFilters] = useState<SearchFilters>(filters)\n\n  // Aggiorna i filtri quando cambiano dall'esterno\n  useEffect(() => {\n    setCurrentFilters(filters)\n  }, [filters])\n\n  // Debounce per i filtri\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      onFiltersChange(currentFilters)\n    }, 300)\n\n    return () => clearTimeout(timeoutId)\n  }, [currentFilters, onFiltersChange])\n\n  const handleFilterChange = (key: keyof SearchFilters, value: string | number) => {\n    setCurrentFilters(prev => ({ ...prev, [key]: value }))\n  }\n\n  const clearFilters = () => {\n    setCurrentFilters({\n      genre: '',\n      artist: '',\n      album: '',\n      minDuration: 0,\n      maxDuration: 9999,\n      minRating: 0,\n      maxRating: 5,\n      minPlayCount: 0,\n      maxPlayCount: 9999,\n      addedAfter: '',\n      addedBefore: ''\n    })\n  }\n\n  const hasActiveFilters = Object.values(currentFilters).some(value => \n    value !== '' && value !== 0 && value !== 9999\n  )\n\n  const formatDuration = (seconds: number) => {\n    const mins = Math.floor(seconds / 60)\n    const secs = Math.floor(seconds % 60)\n    return `${mins}:${secs.toString().padStart(2, '0')}`\n  }\n\n  return (\n    <div className=\"advanced-search\">\n      {/* Pulsante per mostrare/nascondere filtri avanzati */}\n      <div className=\"flex justify-end mb-2\">\n        <button\n          onClick={() => setShowAdvanced(!showAdvanced)}\n          className={`px-3 py-2 rounded-md text-sm transition-all duration-200 flex items-center space-x-2 ${\n            showAdvanced \n              ? 'bg-dj-accent text-white' \n              : 'bg-dj-secondary text-dj-light hover:bg-dj-accent/20'\n          }`}\n          title={showAdvanced ? \"Nascondi filtri avanzati\" : \"Mostra filtri avanzati\"}\n          aria-label={showAdvanced ? \"Nascondi filtri avanzati\" : \"Mostra filtri avanzati\"}\n        >\n          <Filter className=\"w-4 h-4\" />\n          <span>{showAdvanced ? 'Nascondi' : 'Filtri'}</span>\n        </button>\n      </div>\n\n      {/* Filtri avanzati */}\n      {showAdvanced && (\n        <div className=\"bg-dj-secondary rounded-lg p-4 mb-4 border border-dj-accent/20\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-medium text-white\">Filtri Avanzati</h3>\n            <div className=\"flex items-center space-x-2\">\n              {hasActiveFilters && (\n                <button\n                  onClick={clearFilters}\n                  className=\"px-2 py-1 bg-dj-error hover:bg-red-600 rounded text-xs transition-all duration-200\"\n                  title=\"Cancella filtri\"\n                  aria-label=\"Cancella filtri\"\n                >\n                  <X className=\"w-3 h-3\" />\n                </button>\n              )}\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {/* Filtri per genere, artista, album */}\n            <div>\n              <label className=\"block text-sm font-medium text-dj-light/60 mb-2\">Genere</label>\n              <select\n                value={currentFilters.genre}\n                onChange={(e) => handleFilterChange('genre', e.target.value)}\n                className=\"dj-input w-full\"\n                aria-label=\"Seleziona genere\"\n              >\n                <option value=\"\">Tutti i generi</option>\n                {availableGenres.map(genre => (\n                  <option key={genre} value={genre}>{genre}</option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-dj-light/60 mb-2\">Artista</label>\n              <select\n                value={currentFilters.artist}\n                onChange={(e) => handleFilterChange('artist', e.target.value)}\n                className=\"dj-input w-full\"\n                aria-label=\"Seleziona artista\"\n              >\n                <option value=\"\">Tutti gli artisti</option>\n                {availableArtists.map(artist => (\n                  <option key={artist} value={artist}>{artist}</option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-dj-light/60 mb-2\">Album</label>\n              <select\n                value={currentFilters.album}\n                onChange={(e) => handleFilterChange('album', e.target.value)}\n                className=\"dj-input w-full\"\n                aria-label=\"Seleziona album\"\n              >\n                <option value=\"\">Tutti gli album</option>\n                {availableAlbums.map(album => (\n                  <option key={album} value={album}>{album}</option>\n                ))}\n              </select>\n            </div>\n\n            {/* Filtri per durata */}\n            <div>\n              <label className=\"block text-sm font-medium text-dj-light/60 mb-2\">Durata Min (sec)</label>\n              <input\n                type=\"number\"\n                min=\"0\"\n                max=\"9999\"\n                value={currentFilters.minDuration}\n                onChange={(e) => handleFilterChange('minDuration', parseInt(e.target.value) || 0)}\n                className=\"dj-input w-full\"\n                placeholder=\"0\"\n                aria-label=\"Durata minima in secondi\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-dj-light/60 mb-2\">Durata Max (sec)</label>\n              <input\n                type=\"number\"\n                min=\"0\"\n                max=\"9999\"\n                value={currentFilters.maxDuration}\n                onChange={(e) => handleFilterChange('maxDuration', parseInt(e.target.value) || 9999)}\n                className=\"dj-input w-full\"\n                placeholder=\"9999\"\n                aria-label=\"Durata massima in secondi\"\n              />\n            </div>\n\n            {/* Filtri per rating */}\n            <div>\n              <label className=\"block text-sm font-medium text-dj-light/60 mb-2\">Rating Min</label>\n              <div className=\"flex items-center space-x-1\">\n                {[1, 2, 3, 4, 5].map(rating => (\n                  <button\n                    key={rating}\n                    onClick={() => handleFilterChange('minRating', rating)}\n                    className={`p-1 rounded ${\n                      currentFilters.minRating >= rating \n                        ? 'text-yellow-400' \n                        : 'text-dj-light/40'\n                    }`}\n                    title={`Rating minimo: ${rating} stelle`}\n                    aria-label={`Rating minimo: ${rating} stelle`}\n                  >\n                    <Star className=\"w-4 h-4\" />\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-dj-light/60 mb-2\">Rating Max</label>\n              <div className=\"flex items-center space-x-1\">\n                {[1, 2, 3, 4, 5].map(rating => (\n                  <button\n                    key={rating}\n                    onClick={() => handleFilterChange('maxRating', rating)}\n                    className={`p-1 rounded ${\n                      currentFilters.maxRating >= rating \n                        ? 'text-yellow-400' \n                        : 'text-dj-light/40'\n                    }`}\n                    title={`Rating massimo: ${rating} stelle`}\n                    aria-label={`Rating massimo: ${rating} stelle`}\n                  >\n                    <Star className=\"w-4 h-4\" />\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Filtri per play count */}\n            <div>\n              <label className=\"block text-sm font-medium text-dj-light/60 mb-2\">Play Count Min</label>\n              <input\n                type=\"number\"\n                min=\"0\"\n                value={currentFilters.minPlayCount}\n                onChange={(e) => handleFilterChange('minPlayCount', parseInt(e.target.value) || 0)}\n                className=\"dj-input w-full\"\n                placeholder=\"0\"\n                aria-label=\"Play count minimo\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-dj-light/60 mb-2\">Play Count Max</label>\n              <input\n                type=\"number\"\n                min=\"0\"\n                value={currentFilters.maxPlayCount}\n                onChange={(e) => handleFilterChange('maxPlayCount', parseInt(e.target.value) || 9999)}\n                className=\"dj-input w-full\"\n                placeholder=\"9999\"\n                aria-label=\"Play count massimo\"\n              />\n            </div>\n\n            {/* Filtri per data */}\n            <div>\n              <label className=\"block text-sm font-medium text-dj-light/60 mb-2\">Aggiunto dopo</label>\n              <input\n                type=\"date\"\n                value={currentFilters.addedAfter}\n                onChange={(e) => handleFilterChange('addedAfter', e.target.value)}\n                className=\"dj-input w-full\"\n                aria-label=\"Data di aggiunta dopo\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-dj-light/60 mb-2\">Aggiunto prima</label>\n              <input\n                type=\"date\"\n                value={currentFilters.addedBefore}\n                onChange={(e) => handleFilterChange('addedBefore', e.target.value)}\n                className=\"dj-input w-full\"\n                aria-label=\"Data di aggiunta prima\"\n              />\n            </div>\n          </div>\n\n          {/* Riepilogo filtri attivi */}\n          {hasActiveFilters && (\n            <div className=\"mt-4 pt-4 border-t border-dj-accent/20\">\n              <h4 className=\"text-sm font-medium text-white mb-2\">Filtri Attivi:</h4>\n              <div className=\"flex flex-wrap gap-2\">\n                {currentFilters.genre && (\n                  <span className=\"px-2 py-1 bg-dj-accent/20 text-dj-accent rounded text-xs\">\n                    Genere: {currentFilters.genre}\n                  </span>\n                )}\n                {currentFilters.artist && (\n                  <span className=\"px-2 py-1 bg-dj-accent/20 text-dj-accent rounded text-xs\">\n                    Artista: {currentFilters.artist}\n                  </span>\n                )}\n                {currentFilters.album && (\n                  <span className=\"px-2 py-1 bg-dj-accent/20 text-dj-accent rounded text-xs\">\n                    Album: {currentFilters.album}\n                  </span>\n                )}\n                {currentFilters.minDuration > 0 && (\n                  <span className=\"px-2 py-1 bg-dj-accent/20 text-dj-accent rounded text-xs\">\n                    Durata ≥ {formatDuration(currentFilters.minDuration)}\n                  </span>\n                )}\n                {currentFilters.maxDuration < 9999 && (\n                  <span className=\"px-2 py-1 bg-dj-accent/20 text-dj-accent rounded text-xs\">\n                    Durata ≤ {formatDuration(currentFilters.maxDuration)}\n                  </span>\n                )}\n                {currentFilters.minRating > 0 && (\n                  <span className=\"px-2 py-1 bg-dj-accent/20 text-dj-accent rounded text-xs\">\n                    Rating ≥ {currentFilters.minRating}⭐\n                  </span>\n                )}\n                {currentFilters.maxRating < 5 && (\n                  <span className=\"px-2 py-1 bg-dj-accent/20 text-dj-accent rounded text-xs\">\n                    Rating ≤ {currentFilters.maxRating}⭐\n                  </span>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default AdvancedSearch\n","import React, { useState, useEffect, useRef, useCallback } from 'react'\nimport { Search, Music, Plus, Upload, Trash2, Edit3, X } from 'lucide-react'\nimport { useAudio } from '../contexts/AudioContext'\nimport { localDatabase, DatabaseTrack } from '../database/LocalDatabase'\nimport { getBlob } from '../database/BlobStore'\nimport { generateWaveformPeaksFromBlob } from '../utils/AudioAnalysis'\nimport FileUploadManager, { UploadProgress } from '../utils/FileUploadManager'\nimport FolderImporter from './FolderImporter'\nimport AdvancedSearch, { SearchFilters } from './AdvancedSearch'\n\ninterface Playlist {\n  id: string\n  name: string\n  tracks: DatabaseTrack[]\n  createdAt: Date\n}\n\nconst LibraryManager = () => {\n  // const { addToDeck } = useAudio() // Rimosso perché non usato\n  const [tracks, setTracks] = useState<DatabaseTrack[]>([])\n  const [filteredTracks, setFilteredTracks] = useState<DatabaseTrack[]>([])\n  const [searchQuery, setSearchQuery] = useState('')\n  const [searchFilters, setSearchFilters] = useState<SearchFilters>({\n    genre: '',\n    artist: '',\n    album: '',\n    minDuration: 0,\n    maxDuration: 9999,\n    minRating: 0,\n    maxRating: 5,\n    minPlayCount: 0,\n    maxPlayCount: 9999,\n    addedAfter: '',\n    addedBefore: ''\n  })\n  const [sortBy, setSortBy] = useState<'title' | 'artist' | 'duration' | 'addedAt' | 'playCount' | 'rating'>('title')\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc')\n  const [selectedTrack, setSelectedTrack] = useState<string | null>(null)\n  const [showUploadForm, setShowUploadForm] = useState(false)\n  const [uploadProgress, setUploadProgress] = useState<UploadProgress[]>([])\n  const [isUploading, setIsUploading] = useState(false)\n  const fileInputRef = useRef<HTMLInputElement>(null)\n\n  // Nuove variabili per playlist\n  const [playlists, setPlaylists] = useState<Playlist[]>([])\n  const [activePlaylist, setActivePlaylist] = useState<string>('')\n  const [newPlaylistName, setNewPlaylistName] = useState('')\n  const [isCreatingPlaylist, setIsCreatingPlaylist] = useState(false)\n  const [editingPlaylist, setEditingPlaylist] = useState<string | null>(null)\n  const [editName, setEditName] = useState('')\n\n  // NUOVO: Gestione drag & drop per playlist\n  const [draggedTrack, setDraggedTrack] = useState<DatabaseTrack | null>(null)\n  const [dragOverPlaylist, setDragOverPlaylist] = useState<string | null>(null)\n\n  const handleDragStart = (track: DatabaseTrack) => {\n    setDraggedTrack(track)\n    console.log('🎵 Started dragging track:', track.title)\n  }\n\n  const handleDragOver = (e: React.DragEvent, playlistId: string) => {\n    e.preventDefault()\n    setDragOverPlaylist(playlistId)\n  }\n\n  const handleDragLeave = () => {\n    setDragOverPlaylist(null)\n  }\n\n  const handleDrop = async (e: React.DragEvent, playlistId: string) => {\n    e.preventDefault()\n    \n    if (!draggedTrack) return\n    \n    try {\n      console.log('🎵 Dropping track into playlist:', { track: draggedTrack.title, playlistId })\n      \n      // Trova la playlist\n      const playlist = playlists.find(p => p.id === playlistId)\n      if (!playlist) return\n      \n      // Controlla se la traccia è già nella playlist\n      if (playlist.tracks.some(t => t.id === draggedTrack.id)) {\n        console.log('⚠️ Track already in playlist')\n        return\n      }\n      \n      // Aggiungi la traccia alla playlist\n      const updatedTracks = [...playlist.tracks, draggedTrack]\n      await localDatabase.updatePlaylist(playlistId, { tracks: updatedTracks.map(t => t.id) })\n      \n      // Aggiorna lo stato locale\n      const updatedPlaylists = playlists.map(p => \n        p.id === playlistId ? { ...p, tracks: updatedTracks } : p\n      )\n      setPlaylists(updatedPlaylists)\n      \n      console.log('✅ Track added to playlist successfully')\n      \n      // Notifica la Console DJ dell'aggiornamento (senza loop)\n      window.dispatchEvent(new CustomEvent('djconsole:library-playlist-updated', { \n        detail: { playlistId, updatedTracks, updatedPlaylists } \n      }))\n      \n    } catch (error) {\n      console.error('❌ Error adding track to playlist:', error)\n    } finally {\n      setDraggedTrack(null)\n      setDragOverPlaylist(null)\n    }\n  }\n\n  // NUOVO: Funzione per rimuovere traccia da playlist\n  const removeTrackFromPlaylist = async (trackId: string, playlistId: string) => {\n    try {\n      console.log('🗑️ Removing track from playlist:', { trackId, playlistId })\n      \n      // Trova la playlist\n      const playlist = playlists.find(p => p.id === playlistId)\n      if (!playlist) return\n      \n      // Rimuovi la traccia dalla playlist\n      const updatedTracks = playlist.tracks.filter(t => t.id !== trackId)\n      await localDatabase.updatePlaylist(playlistId, { tracks: updatedTracks.map(t => t.id) })\n      \n      // Aggiorna lo stato locale\n      const updatedPlaylists = playlists.map(p => \n        p.id === playlistId ? { ...p, tracks: updatedTracks } : p\n      )\n      setPlaylists(updatedPlaylists)\n      \n      console.log('✅ Track removed from playlist successfully')\n      \n      // Notifica la Console DJ dell'aggiornamento (senza loop)\n      window.dispatchEvent(new CustomEvent('djconsole:library-playlist-updated', { \n        detail: { playlistId, updatedTracks, updatedPlaylists } \n      }))\n      \n    } catch (error) {\n      console.error('❌ Error removing track from playlist:', error)\n    }\n  }\n\n  // NUOVO: Funzione per aggiungere traccia alla playlist selezionata\n  const addTrackToSelectedPlaylist = async (track: DatabaseTrack) => {\n    if (!activePlaylist) {\n      // Usa il sistema di notifiche invece di alert\n      window.dispatchEvent(new CustomEvent('djconsole:notification', {\n        detail: { \n          type: 'warning', \n          message: 'Seleziona prima una playlist per aggiungere la canzone!' \n        }\n      }))\n      return\n    }\n    \n    try {\n      console.log('🎵 Adding track to selected playlist:', { track: track.title, playlistId: activePlaylist })\n      \n      // Trova la playlist\n      const playlist = playlists.find(p => p.id === activePlaylist)\n      if (!playlist) return\n      \n      // Controlla se la traccia è già nella playlist\n      if (playlist.tracks.some(t => t.id === track.id)) {\n        window.dispatchEvent(new CustomEvent('djconsole:notification', {\n          detail: { \n            type: 'info', \n            message: 'Questa canzone è già nella playlist!' \n          }\n        }))\n        return\n      }\n      \n      // Aggiungi la traccia alla playlist\n      const updatedTracks = [...playlist.tracks, track]\n      await localDatabase.updatePlaylist(activePlaylist, { tracks: updatedTracks.map(t => t.id) })\n      \n      // Aggiorna lo stato locale\n      const updatedPlaylists = playlists.map(p => \n        p.id === activePlaylist ? { ...p, tracks: updatedTracks } : p\n      )\n      setPlaylists(updatedPlaylists)\n      \n      console.log('✅ Track added to selected playlist successfully')\n      \n      // Notifica successo\n      window.dispatchEvent(new CustomEvent('djconsole:notification', {\n        detail: { \n          type: 'success', \n          message: `\"${track.title}\" aggiunta alla playlist \"${playlist.name}\"` \n        }\n      }))\n      \n      // Notifica la Console DJ dell'aggiornamento (senza loop)\n      window.dispatchEvent(new CustomEvent('djconsole:library-playlist-updated', { \n        detail: { playlistId: activePlaylist, updatedTracks, updatedPlaylists } \n      }))\n      \n    } catch (error) {\n      console.error('❌ Error adding track to selected playlist:', error)\n      window.dispatchEvent(new CustomEvent('djconsole:notification', {\n        detail: { \n          type: 'error', \n          message: 'Errore durante l\\'aggiunta della canzone alla playlist' \n        }\n      }))\n    }\n  }\n\n\n  // Filter and sort tracks\n  useEffect(() => {\n    let filtered = [...tracks]\n\n    // Apply search filter\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase()\n      filtered = filtered.filter(track =>\n        track.title.toLowerCase().includes(query) ||\n        track.artist.toLowerCase().includes(query) ||\n        (track.album && track.album.toLowerCase().includes(query)) ||\n        (track.genre && track.genre.toLowerCase().includes(query))\n      )\n    }\n\n    // Apply advanced filters\n    if (searchFilters.genre) {\n      filtered = filtered.filter(track => track.genre === searchFilters.genre)\n    }\n    if (searchFilters.artist) {\n      filtered = filtered.filter(track => track.artist === searchFilters.artist)\n    }\n    if (searchFilters.album) {\n      filtered = filtered.filter(track => track.album === searchFilters.album)\n    }\n    if (searchFilters.minDuration > 0) {\n      filtered = filtered.filter(track => track.duration >= searchFilters.minDuration)\n    }\n    if (searchFilters.maxDuration < 9999) {\n      filtered = filtered.filter(track => track.duration <= searchFilters.maxDuration)\n    }\n    if (searchFilters.minRating > 0) {\n      filtered = filtered.filter(track => (track.rating || 0) >= searchFilters.minRating)\n    }\n    if (searchFilters.maxRating < 5) {\n      filtered = filtered.filter(track => (track.rating || 0) <= searchFilters.maxRating)\n    }\n    if (searchFilters.minPlayCount > 0) {\n      filtered = filtered.filter(track => (track.playCount || 0) >= searchFilters.minPlayCount)\n    }\n    if (searchFilters.maxPlayCount < 9999) {\n      filtered = filtered.filter(track => (track.playCount || 0) <= searchFilters.maxPlayCount)\n    }\n\n    // Apply sorting\n    filtered.sort((a, b) => {\n      let aValue: any\n      let bValue: any\n\n      switch (sortBy) {\n        case 'title':\n          aValue = a.title.toLowerCase()\n          bValue = b.title.toLowerCase()\n          break\n        case 'artist':\n          aValue = a.artist.toLowerCase()\n          bValue = b.artist.toLowerCase()\n          break\n        case 'duration':\n          aValue = a.duration\n          bValue = b.duration\n          break\n        case 'addedAt':\n          aValue = new Date(a.addedAt || 0)\n          bValue = new Date(b.addedAt || 0)\n          break\n        case 'playCount':\n          aValue = a.playCount || 0\n          bValue = b.playCount || 0\n          break\n        case 'rating':\n          aValue = a.rating || 0\n          bValue = b.rating || 0\n          break\n        default:\n          aValue = a.title.toLowerCase()\n          bValue = b.title.toLowerCase()\n      }\n\n      if (sortOrder === 'asc') {\n        return aValue < bValue ? -1 : aValue > bValue ? 1 : 0\n      } else {\n        return aValue > bValue ? -1 : aValue < bValue ? 1 : 0\n      }\n    })\n\n    setFilteredTracks(filtered)\n  }, [tracks, searchQuery, searchFilters, sortBy, sortOrder])\n\n  // Load tracks from database\n  useEffect(() => {\n    const loadTracks = async () => {\n      try {\n        await localDatabase.waitForInitialization()\n        const allTracks = await localDatabase.getAllTracks()\n        // Evita freeze in Electron: non rigenerare waveform massivamente sul main thread\n        const isElectron = !!((window as any).fileStore) || ((typeof navigator !== 'undefined' && (navigator.userAgent || '').includes('Electron')))\n        if (!isElectron) {\n          // In browser è ok rigenerare (meno rischio di blocchi)\n          for (const t of allTracks) {\n            if ((!t.waveform || t.waveform.length === 0) && t.blobId) {\n              try {\n                const blob = await getBlob(t.blobId)\n                if (blob) {\n                  const peaks = await generateWaveformPeaksFromBlob(blob, 200)\n                  if (peaks.length > 0) {\n                    await localDatabase.updateTrack(t.id, { waveform: peaks })\n                    t.waveform = peaks\n                  }\n                }\n              } catch {}\n            }\n          }\n        } else {\n          try { (window as any).log?.info?.('Waveform regen skipped in Electron to keep UI responsive') } catch {}\n        }\n        setTracks(allTracks)\n        setFilteredTracks(allTracks)\n      } catch (error) {\n        console.error('Failed to load tracks:', error)\n      }\n    }\n    \n    loadTracks()\n    // Reload when DB updates (e.g., after upload, playlist changes)\n    const onDbUpdated = (e: Event) => {\n      loadTracks()\n    }\n    window.addEventListener('djconsole:db-updated', onDbUpdated as EventListener)\n\n    // Reload when tab becomes visible again\n    const onVisibility = () => {\n      if (document.visibilityState === 'visible') loadTracks()\n    }\n    document.addEventListener('visibilitychange', onVisibility)\n    \n    return () => {\n      window.removeEventListener('djconsole:db-updated', onDbUpdated as EventListener)\n      document.removeEventListener('visibilitychange', onVisibility)\n    }\n  }, [])\n\n  // NUOVO: Funzione per forzare il ripristino del database\n  const forceDatabaseRestore = async () => {\n    try {\n      console.log('🔄 Forcing database restoration...')\n      \n      // Forza la reinizializzazione del database\n      await localDatabase.waitForInitialization()\n      \n      // Ricarica tutte le tracce\n      const allTracks = await localDatabase.getAllTracks()\n      setTracks(allTracks)\n      setFilteredTracks(allTracks)\n      \n      // Ricarica le playlist con tracce complete\n      const allPlaylists = await localDatabase.getAllPlaylists()\n      \n      // RICOSTRUISCI COMPLETAMENTE le playlist con tracce complete\n      const reconstructedPlaylists = await Promise.all(\n        allPlaylists.map(async (playlist) => {\n          try {\n            // Per ogni playlist, ricostruisci le tracce complete\n            const fullTracks = await Promise.all(\n              playlist.tracks.map(async (trackId) => {\n                try {\n                  // Carica la traccia completa dal database\n                  const fullTrack = await localDatabase.getTrack(trackId)\n                  if (fullTrack) {\n                    return fullTrack\n                  } else {\n                    console.warn(`⚠️ Track ${trackId} not found during restore, skipping`)\n                    return null\n                  }\n                } catch (error) {\n                  console.error(`❌ Error loading track ${trackId} during restore:`, error)\n                  return null\n                }\n              })\n            )\n            \n            // Filtra le tracce valide e ricostruisci la playlist\n            const validTracks = fullTracks.filter(track => track !== null) as DatabaseTrack[]\n            \n            return {\n              ...playlist,\n              tracks: validTracks\n            }\n          } catch (error) {\n            console.error(`❌ Error reconstructing playlist ${playlist.id} during restore:`, error)\n            return { ...playlist, tracks: [] }\n          }\n        })\n      )\n      \n      setPlaylists(reconstructedPlaylists)\n      \n      console.log('✅ Database restored successfully')\n      \n      // Sincronizzazione diretta senza eventi che causano loop\n      \n    } catch (error) {\n      console.error('❌ Failed to restore database:', error)\n    }\n  }\n\n  // SOLUZIONE ROCK-SOLID: Carica playlist dal database SENZA default\n  useEffect(() => {\n    const loadPlaylistsFromDatabase = async () => {\n      try {\n        console.log('🔄 Loading playlists from database...')\n        \n        // Carica playlist dal database locale\n        const savedPlaylists = await localDatabase.getAllPlaylists()\n        \n        if (savedPlaylists && savedPlaylists.length > 0) {\n          console.log('✅ Found saved playlists:', savedPlaylists.length)\n          \n          // RICOSTRUISCI COMPLETAMENTE le playlist con tracce complete\n          const reconstructedPlaylists = await Promise.all(\n            savedPlaylists.map(async (playlist) => {\n              try {\n                // Per ogni playlist, ricostruisci le tracce complete\n                const fullTracks = await Promise.all(\n                  playlist.tracks.map(async (trackId) => {\n                    try {\n                      // Carica la traccia completa dal database\n                      const fullTrack = await localDatabase.getTrack(trackId)\n                      if (fullTrack) {\n                        return fullTrack\n                      } else {\n                        console.warn(`⚠️ Track ${trackId} not found, skipping`)\n                        return null\n                      }\n                    } catch (error) {\n                      console.error(`❌ Error loading track ${trackId}:`, error)\n                      return null\n                    }\n                  })\n                )\n                \n                // Filtra le tracce valide e ricostruisci la playlist\n                const validTracks = fullTracks.filter(track => track !== null) as DatabaseTrack[]\n                \n                return {\n                  ...playlist,\n                  tracks: validTracks\n                }\n              } catch (error) {\n                console.error(`❌ Error reconstructing playlist ${playlist.id}:`, error)\n                return { ...playlist, tracks: [] }\n              }\n            })\n          )\n          \n          console.log('✅ Playlists reconstructed with full tracks:', reconstructedPlaylists.length)\n          setPlaylists(reconstructedPlaylists)\n          \n          if (reconstructedPlaylists.length > 0) {\n            setActivePlaylist(reconstructedPlaylists[0].id)\n          }\n        } else {\n          console.log('📝 No saved playlists found - starting with empty state')\n          setPlaylists([])\n          setActivePlaylist('')\n        }\n        \n      } catch (error) {\n        console.error('❌ Error loading playlists:', error)\n        // In caso di errore, inizia con stato vuoto\n        setPlaylists([])\n        setActivePlaylist('')\n      }\n    }\n    \n    loadPlaylistsFromDatabase()\n  }, [])\n\n  // SOLUZIONE ROCK-SOLID: Salvataggio IMMEDIATO e affidabile\n  const savePlaylistsToDatabase = useCallback(async (playlistsToSave: Playlist[] = playlists) => {\n    try {\n      console.log('💾 Saving playlists to database IMMEDIATELY:', playlistsToSave.length)\n      \n      // Salva ogni playlist nel database\n      for (const playlist of playlistsToSave) {\n        await localDatabase.updatePlaylist(playlist.id, { \n          tracks: playlist.tracks.map(t => t.id),\n          name: playlist.name,\n          createdAt: playlist.createdAt\n        })\n      }\n      \n      console.log('✅ Playlists saved successfully to database')\n      \n      // Salva anche nel localStorage come backup\n      localStorage.setItem('djconsole_playlists_backup', JSON.stringify(playlistsToSave))\n      console.log('💾 Backup saved to localStorage')\n      \n    } catch (error) {\n      console.error('❌ Error saving playlists:', error)\n      \n      // Fallback: salva nel localStorage\n      try {\n        localStorage.setItem('djconsole_playlists_backup', JSON.stringify(playlistsToSave))\n        console.log('💾 Fallback: saved to localStorage')\n      } catch (localError) {\n        console.error('❌ Even localStorage failed:', localError)\n      }\n    }\n  }, [localDatabase])\n\n  // RIMOSSO: Salvataggio automatico che causava loop infinito\n  // Il salvataggio avviene solo quando necessario tramite le funzioni specifiche\n\n  // SOLUZIONE ROCK-SOLID: Crea playlist e salva IMMEDIATAMENTE\n  const createPlaylistRockSolid = async () => {\n    try {\n      // Salva il nome PRIMA di resettare lo stato\n      const playlistName = newPlaylistName.trim() || 'Nuova Playlist'\n      const wasNameEmpty = !newPlaylistName.trim()\n      \n      console.log('🎵 Creating playlist with name:', playlistName, 'wasEmpty:', wasNameEmpty)\n      \n      // Crea la playlist nel database PRIMA di aggiornare lo stato\n      const playlistId = await localDatabase.createPlaylist({\n        name: playlistName,\n        tracks: []\n      })\n      \n      console.log('✅ Playlist created in database with ID:', playlistId)\n      \n      // Crea l'oggetto playlist per lo stato locale\n      const newPlaylist: Playlist = {\n        id: playlistId,\n        name: playlistName,\n        tracks: [],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        isPublic: true,\n        totalDuration: 0\n      }\n      \n      // Aggiorna lo stato locale\n      const updatedPlaylists = [...playlists, newPlaylist]\n      setPlaylists(updatedPlaylists)\n      setActivePlaylist(newPlaylist.id)\n      setNewPlaylistName('')\n      setIsCreatingPlaylist(false)\n      \n      // Se il nome era vuoto, avvia immediatamente la modifica\n      if (wasNameEmpty) {\n        setEditingPlaylist(newPlaylist.id)\n        setEditName('')\n      }\n      \n      // Notifica successo\n      window.dispatchEvent(new CustomEvent('djconsole:notification', {\n        detail: { \n          type: 'success', \n          message: `Playlist \"${newPlaylist.name}\" creata` \n        }\n      }))\n      \n      // Notifica la Console DJ dell'aggiornamento (senza loop)\n      window.dispatchEvent(new CustomEvent('djconsole:library-playlist-updated', { \n        detail: { playlistId: newPlaylist.id, updatedTracks: newPlaylist.tracks || [], updatedPlaylists } \n      }))\n      \n    } catch (error) {\n      console.error('❌ Errore durante la creazione della playlist:', error)\n      window.dispatchEvent(new CustomEvent('djconsole:notification', {\n        detail: { \n          type: 'error', \n          message: 'Errore durante la creazione della playlist' \n        }\n      }))\n    }\n  }\n\n\n  // Rinomina playlist\n  const renamePlaylist = async (playlistId: string) => {\n    if (editName.trim()) {\n      try {\n        // Aggiorna nel database\n        await localDatabase.updatePlaylist(playlistId, { name: editName.trim() })\n        \n        // Aggiorna lo stato locale\n        const updatedPlaylists = playlists.map(p => \n          p.id === playlistId ? { ...p, name: editName.trim() } : p\n        )\n        setPlaylists(updatedPlaylists)\n        setEditingPlaylist(null)\n        setEditName('')\n        \n        console.log('✅ Playlist rinominata con successo')\n        \n        // Notifica successo\n        window.dispatchEvent(new CustomEvent('djconsole:notification', {\n          detail: { \n            type: 'success', \n            message: `Playlist rinominata in \"${editName.trim()}\"` \n          }\n        }))\n        \n        // Notifica la Console DJ dell'aggiornamento (senza loop)\n        const playlist = updatedPlaylists.find(p => p.id === playlistId)\n        window.dispatchEvent(new CustomEvent('djconsole:library-playlist-updated', { \n          detail: { playlistId, updatedTracks: playlist?.tracks || [], updatedPlaylists } \n        }))\n        \n      } catch (error) {\n        console.error('❌ Errore durante la rinominazione della playlist:', error)\n        window.dispatchEvent(new CustomEvent('djconsole:notification', {\n          detail: { \n            type: 'error', \n            message: 'Errore durante la rinominazione della playlist' \n          }\n        }))\n      }\n    }\n  }\n\n  // Elimina playlist\n  const deletePlaylist = async (playlistId: string) => {\n    const playlist = playlists.find(p => p.id === playlistId)\n    const playlistName = playlist?.name || 'Playlist'\n    \n    if (window.confirm(`Sei sicuro di voler eliminare la playlist \"${playlistName}\"?`)) {\n      try {\n        // Elimina dal database\n        await localDatabase.deletePlaylist(playlistId)\n        \n        // Aggiorna lo stato locale\n        const updatedPlaylists = playlists.filter(p => p.id !== playlistId)\n        setPlaylists(updatedPlaylists)\n        \n        // Se era attiva, passa alla prima disponibile\n        if (activePlaylist === playlistId) {\n          if (updatedPlaylists.length > 0) {\n            setActivePlaylist(updatedPlaylists[0].id)\n          } else {\n            setActivePlaylist('')\n          }\n        }\n        \n        console.log('✅ Playlist eliminata con successo')\n        \n        // Notifica successo\n        window.dispatchEvent(new CustomEvent('djconsole:notification', {\n          detail: { \n            type: 'success', \n            message: `Playlist \"${playlistName}\" eliminata` \n          }\n        }))\n        \n        // Notifica la Console DJ dell'aggiornamento (senza loop)\n        const playlist = updatedPlaylists.find(p => p.id === playlistId)\n        window.dispatchEvent(new CustomEvent('djconsole:library-playlist-updated', { \n          detail: { playlistId, updatedTracks: playlist?.tracks || [], updatedPlaylists } \n        }))\n        \n      } catch (error) {\n        console.error('❌ Errore durante l\\'eliminazione della playlist:', error)\n        window.dispatchEvent(new CustomEvent('djconsole:notification', {\n          detail: { \n            type: 'error', \n            message: 'Errore durante l\\'eliminazione della playlist' \n          }\n        }))\n      }\n    }\n  }\n\n\n  const deleteTrack = async (trackId: string) => {\n    // Conferma prima di eliminare\n    if (!window.confirm('Sei sicuro di voler eliminare questa traccia? Verrà rimossa anche da tutte le playlist.')) {\n      return\n    }\n    \n    try {\n      // Rimuovi la traccia dal database\n      await localDatabase.deleteTrack(trackId)\n      \n      // Aggiorna lo stato locale\n      setTracks(prev => prev.filter(t => t.id !== trackId))\n      setFilteredTracks(prev => prev.filter(t => t.id !== trackId))\n      if (selectedTrack === trackId) {\n        setSelectedTrack(null)\n      }\n      \n      // NUOVO: Sincronizza le playlist - rimuovi la traccia da tutte le playlist\n      const updatedPlaylists = playlists.map(playlist => ({\n        ...playlist,\n        tracks: playlist.tracks.filter(track => track.id !== trackId)\n      }))\n      setPlaylists(updatedPlaylists)\n      \n      // Aggiorna anche il database delle playlist\n      for (const playlist of playlists) {\n        if (playlist.tracks.some(track => track.id === trackId)) {\n          const updatedTracks = playlist.tracks.filter(track => track.id !== trackId)\n          await localDatabase.updatePlaylist(playlist.id, { tracks: updatedTracks.map(t => t.id) })\n        }\n      }\n      \n      console.log('✅ Traccia eliminata e sincronizzata con tutte le playlist')\n      \n      // Sincronizzazione diretta senza eventi che causano loop\n      \n    } catch (error) {\n      console.error('Errore durante l\\'eliminazione della traccia:', error)\n    }\n  }\n\n  const handleUpload = async (files: FileList) => {\n    setIsUploading(true)\n    setUploadProgress([])\n\n    try {\n      const uploadManager = new FileUploadManager()\n      const results = await uploadManager.uploadFiles(files, (progress: any) => {\n        setUploadProgress(prev => {\n          const existing = prev.find(p => p.fileName === progress.fileName)\n          if (existing) {\n            return prev.map(p => p.fileName === progress.fileName ? progress : p)\n          } else {\n            return [...prev, progress]\n          }\n        })\n      })\n\n      console.log('Upload completato:', results)\n      setShowUploadForm(false)\n      \n      // Reload tracks\n      const allTracks = await localDatabase.getAllTracks()\n      setTracks(allTracks)\n      setFilteredTracks(allTracks)\n      \n      // Sincronizzazione diretta senza eventi che causano loop\n    } catch (error) {\n      console.error('Errore durante l\\'upload:', error)\n    } finally {\n      setIsUploading(false)\n      setUploadProgress([])\n    }\n  }\n\n  const handleClearLibrary = async () => {\n    if (window.confirm('⚠️ ATTENZIONE: Questa operazione eliminerà TUTTE le canzoni dalla libreria. Sei sicuro di voler continuare?')) {\n      try {\n        console.log('🗑️ [LIBRARY] Inizio pulizia libreria...')\n        \n        // Elimina tutte le tracce dal database\n        const allTracks = await localDatabase.getAllTracks()\n        for (const track of allTracks) {\n          await localDatabase.deleteTrack(track.id)\n        }\n        \n        // Pulisci lo stato locale\n        setTracks([])\n        setFilteredTracks([])\n        setSelectedTrack(null)\n        \n        console.log('✅ [LIBRARY] Libreria pulita con successo')\n        \n        // Sincronizzazione diretta senza eventi che causano loop\n      } catch (error) {\n        console.error('❌ [LIBRARY] Errore durante la pulizia della libreria:', error)\n        alert('Errore durante la pulizia della libreria. Controlla la console per i dettagli.')\n      }\n    }\n  }\n\n  // Rimosso perché non usato\n  // const genres = tracks.map(track => track.genre).filter(Boolean)\n  // const artists = tracks.map(track => track.artist).filter(Boolean)\n  // const albums = tracks.map(track => track.album).filter(Boolean) as string[]\n\n  const currentPlaylist = playlists.find(p => p.id === activePlaylist)\n\n  // NUOVO: Sincronizzazione completa con la console DJ\n  useEffect(() => {\n    // Listener per aggiornamenti playlist dalla console DJ\n    const handlePlaylistUpdatedFromConsole = (event: CustomEvent) => {\n      const { playlistId, updatedTracks, updatedPlaylists } = event.detail\n      console.log('🔄 Playlist updated from console - syncing library:', { playlistId, trackCount: updatedTracks?.length || 0 })\n      \n      // Aggiorna lo stato locale delle playlist\n      if (updatedPlaylists && Array.isArray(updatedPlaylists)) {\n        setPlaylists(updatedPlaylists)\n      } else if (playlistId && updatedTracks && Array.isArray(updatedTracks)) {\n        // Aggiorna solo la playlist specifica\n        setPlaylists(prev => prev.map(p => \n          p.id === playlistId ? { ...p, tracks: updatedTracks } : p\n        ))\n      }\n    }\n\n    // RIMOSSO: Listener che causava loop infinito\n    // La sincronizzazione avviene direttamente nelle funzioni specifiche\n\n    // Listener per richieste di sincronizzazione dalla console\n    const handleSyncRequestFromConsole = () => {\n      console.log('🔄 Sync request from console - sending current playlist state')\n      \n      // Sincronizzazione diretta senza eventi che causano loop\n    }\n\n    window.addEventListener('djconsole:playlist-updated', handlePlaylistUpdatedFromConsole as EventListener)\n    window.addEventListener('djconsole:request-playlists-sync', handleSyncRequestFromConsole as EventListener)\n    \n    return () => {\n      window.removeEventListener('djconsole:playlist-updated', handlePlaylistUpdatedFromConsole as EventListener)\n      window.removeEventListener('djconsole:request-playlists-sync', handleSyncRequestFromConsole as EventListener)\n    }\n  }, [])\n\n  // RIMOSSO: Sincronizzazione automatica che causava loop infinito\n  // La sincronizzazione avviene solo quando necessario tramite le funzioni specifiche\n\n\n\n\n  // RIMOSSO: Sincronizzazione che causava loop infinito\n\n  return (\n    <div className=\"min-h-screen bg-dj-dark text-white p-4 md:p-6 overflow-y-auto\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-dj font-bold text-white mb-2\">🎵 Libreria & Playlist</h1>\n          <p className=\"text-dj-light/60\">Gestisci la tua libreria musicale e organizza le playlist - Vista Unificata</p>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <button\n            onClick={() => setShowUploadForm(!showUploadForm)}\n            className=\"dj-button flex items-center space-x-2\"\n          >\n            <Upload className=\"w-4 h-4\" />\n            <span>Carica File</span>\n          </button>\n          \n          {/* NUOVO: Pulsante per ripristinare il database */}\n          <button\n            onClick={forceDatabaseRestore}\n            className=\"dj-button-warning flex items-center space-x-2\"\n            title=\"Ripristina Database e Playlist\"\n          >\n            <span>🔄</span>\n            <span>Ripristina DB</span>\n          </button>\n          \n          <button\n            onClick={handleClearLibrary}\n            className=\"dj-button-danger flex items-center space-x-2\"\n          >\n            <Trash2 className=\"w-4 h-4\" />\n            <span>Pulisci Libreria</span>\n          </button>\n        </div>\n      </div>\n\n      {/* Tab Navigation - RIMOSSO: Ripristino vista originale */}\n      {/* <div className=\"flex items-center space-x-1 mb-6 bg-dj-primary rounded-lg p-1\">\n        <button\n          onClick={() => setActiveTab('library')}\n          className={`flex items-center space-x-2 px-4 py-2 rounded-md text-sm font-medium transition-all ${\n            activeTab === 'library'\n              ? 'bg-dj-accent text-white shadow-lg'\n              : 'bg-transparent text-dj-light/80 hover:bg-dj-accent/20 hover:text-white'\n          }`}\n        >\n          <Library size={16} />\n          <span>Libreria ({tracks.length})</span>\n        </button>\n        <button\n          onClick={() => setActiveTab('playlists')}\n          className={`flex items-center space-x-2 px-4 py-2 rounded-md text-sm font-medium transition-all ${\n            activeTab === 'playlists'\n              ? 'bg-dj-accent text-white shadow-lg'\n              : 'bg-transparent text-dj-light/80 hover:bg-dj-accent/20 hover:text-white'\n          }`}\n        >\n          <Music size={16} />\n          <span>Playlist ({playlists.length})</span>\n        </button>\n      </div> */}\n\n      {/* Upload Form */}\n      {showUploadForm && (\n        <div className=\"bg-dj-secondary rounded-xl p-6 mb-6 border border-dj-accent/20\">\n          <h2 className=\"text-xl font-dj font-bold text-white mb-4\">Carica File Musicali</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <h3 className=\"text-lg font-medium text-white mb-3\">Carica File Singoli</h3>\n              <input\n                ref={fileInputRef}\n                type=\"file\"\n                multiple\n                accept=\"audio/*\"\n                onChange={(e) => e.target.files && handleUpload(e.target.files)}\n                className=\"dj-input w-full\"\n              />\n            </div>\n            <div>\n              <h3 className=\"text-lg font-medium text-white mb-3\">Importa Cartella</h3>\n              <FolderImporter onImportComplete={() => {}} />\n            </div>\n          </div>\n          \n          {isUploading && (\n            <div className=\"mt-4\">\n              <h4 className=\"text-sm font-medium text-white mb-2\">Progresso Upload:</h4>\n              {uploadProgress.map((progress: any, index) => (\n                <div key={index} className=\"text-sm text-dj-light/60\">\n                  {progress.fileName || 'File'}: {Math.round(progress.progress || 0)}%\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* VISTA ORIGINALE: Libreria e Playlist insieme */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Libreria - Colonna sinistra */}\n        <div className=\"lg:col-span-2 space-y-4\">\n          {/* Search and Filters */}\n          <div className=\"space-y-4\">\n            {/* Search Bar */}\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-dj-light/60\" />\n              <input\n                type=\"text\"\n                placeholder=\"Cerca canzoni, artisti, album...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"dj-input w-full pl-10\"\n              />\n            </div>\n\n            {/* Advanced Search */}\n            <AdvancedSearch\n              filters={searchFilters}\n              onFiltersChange={setSearchFilters}\n              availableGenres={[]}\n              availableArtists={[]}\n              availableAlbums={[]}\n            />\n\n            {/* Sort Controls */}\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-sm text-dj-light/60\">Ordina per:</span>\n                <select\n                  value={sortBy}\n                  onChange={(e) => setSortBy(e.target.value as any)}\n                  className=\"dj-select bg-dj-secondary border-dj-accent/30 text-white\"\n                  title=\"Seleziona criterio di ordinamento\"\n                >\n                  <option value=\"title\">Titolo</option>\n                  <option value=\"artist\">Artista</option>\n                  <option value=\"duration\">Durata</option>\n                  <option value=\"addedAt\">Data Aggiunta</option>\n                  <option value=\"playCount\">Conteggio Riproduzioni</option>\n                  <option value=\"rating\">Valutazione</option>\n                </select>\n              </div>\n              \n              <button\n                onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}\n                className=\"dj-button-secondary\"\n              >\n                {sortOrder === 'asc' ? '↑ Crescente' : '↓ Decrescente'}\n              </button>\n            </div>\n          </div>\n\n          {/* Tracks List */}\n          <div className=\"bg-dj-secondary rounded-xl border border-dj-accent/20 overflow-hidden\">\n            <div className=\"p-4 border-b border-dj-accent/20\">\n              <h3 className=\"text-lg font-dj font-bold text-white\">\n                Libreria ({filteredTracks.length} tracce)\n              </h3>\n            </div>\n            \n            <div className=\"max-h-[600px] overflow-y-auto\">\n              {filteredTracks.length === 0 ? (\n                <div className=\"text-center py-12 text-dj-light/60\">\n                  <Music className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n                  <p className=\"text-lg mb-2\">Nessuna traccia trovata</p>\n                  <p className=\"text-sm\">Prova a modificare i filtri di ricerca o carica nuovi file</p>\n                </div>\n              ) : (\n                <div className=\"divide-y divide-dj-accent/10\">\n                  {filteredTracks.map((track) => (\n                    <div\n                      key={track.id}\n                      draggable\n                      onDragStart={() => handleDragStart(track)}\n                      onDoubleClick={() => addTrackToSelectedPlaylist(track)}\n                      className={`p-4 hover:bg-dj-primary/20 transition-all cursor-move ${\n                        selectedTrack === track.id ? 'bg-dj-accent/10 border-l-4 border-dj-accent' : ''\n                      }`}\n                      onClick={() => setSelectedTrack(track.id)}\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex-1 min-w-0\">\n                          <h4 className=\"font-medium text-white truncate\">{track.title}</h4>\n                          <p className=\"text-sm text-dj-light/60 truncate\">{track.artist}</p>\n                          {track.album && (\n                            <p className=\"text-xs text-dj-light/40 truncate\">{track.album}</p>\n                          )}\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-3 ml-4\">\n                          <div className=\"text-right\">\n                            <div className=\"text-sm text-dj-light/60\">\n                              {Math.floor(track.duration / 60)}:{(track.duration % 60).toString().padStart(2, '0')}\n                            </div>\n                            {track.playCount > 0 && (\n                              <div className=\"text-xs text-dj-accent\">▶ {track.playCount}</div>\n                            )}\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-2\">\n                            <button\n                              onClick={(e) => {\n                                e.stopPropagation()\n                                deleteTrack(track.id)\n                              }}\n                              className=\"p-2 bg-red-500/20 hover:bg-red-500/30 rounded transition-all\"\n                              title=\"Elimina traccia\"\n                            >\n                              <Trash2 size={16} className=\"text-red-400\" />\n                            </button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n          {/* Playlist - Colonna destra */}\n        <div className=\"lg:col-span-1 space-y-6\">\n          {/* Istruzioni per aggiungere canzoni */}\n          <div className=\"bg-dj-accent/10 border border-dj-accent/30 rounded-lg p-4\">\n            <h3 className=\"text-lg font-dj font-bold text-white mb-2\">📝 Come aggiungere canzoni</h3>\n            <div className=\"text-sm text-dj-light/80 space-y-2\">\n              <p>• <strong>Drag & Drop:</strong> Trascina una canzone dalla libreria alla playlist</p>\n              <p>• <strong>Doppio Click:</strong> Fai doppio click su una canzone per aggiungerla alla playlist selezionata</p>\n              <p>• <strong>Seleziona playlist:</strong> Clicca su una playlist per selezionarla (evidenziata in verde)</p>\n            </div>\n          </div>\n\n          {/* Gestione Playlist */}\n          <div className=\"bg-dj-primary border border-dj-accent/30 rounded-lg\">\n            <div className=\"p-4 border-b border-dj-accent/20\">\n              <h3 className=\"text-lg font-dj font-bold text-white mb-2\">Playlist</h3>\n              <p className=\"text-sm text-dj-light/60\">{playlists.length} playlist create</p>\n            </div>\n            \n            <div className=\"p-4 space-y-2\">\n              {/* Lista Playlist */}\n              {playlists.map(playlist => (\n                <div\n                  key={playlist.id}\n                  className={`w-full p-3 rounded-lg text-left transition-all ${\n                    activePlaylist === playlist.id\n                      ? 'bg-dj-accent text-white shadow-lg'\n                      : 'bg-dj-primary/50 text-dj-light/80 hover:bg-dj-accent/20 hover:text-white'\n                  } ${\n                    dragOverPlaylist === playlist.id\n                      ? 'border-2 border-green-400 bg-green-400/20'\n                      : ''\n                  }`}\n                  onDragOver={(e) => handleDragOver(e, playlist.id)}\n                  onDragLeave={handleDragLeave}\n                  onDrop={(e) => handleDrop(e, playlist.id)}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div \n                      onClick={() => setActivePlaylist(playlist.id)}\n                      className=\"flex-1 flex items-center justify-between cursor-pointer\"\n                    >\n                      <div className=\"flex items-center space-x-2\">\n                        <Music size={16} />\n                        {editingPlaylist === playlist.id ? (\n                          <input\n                            type=\"text\"\n                            value={editName}\n                            onChange={(e) => setEditName(e.target.value)}\n                            onKeyPress={(e) => e.key === 'Enter' && renamePlaylist(playlist.id)}\n                            onBlur={() => {\n                              setEditingPlaylist(null)\n                              setEditName('')\n                            }}\n                            className=\"bg-transparent border-none outline-none text-white placeholder-dj-light/40\"\n                            placeholder=\"Nuovo nome playlist\"\n                            title=\"Inserisci il nuovo nome della playlist\"\n                            autoFocus\n                          />\n                        ) : (\n                          <span className=\"font-medium\">{playlist.name}</span>\n                        )}\n                      </div>\n                      <span className=\"text-xs bg-dj-accent/20 px-2 py-1 rounded-full\">\n                        {playlist.tracks ? playlist.tracks.filter(t => t && t.id).length : 0}\n                      </span>\n                    </div>\n                    \n                    {/* Pulsanti di azione */}\n                    <div className=\"flex items-center space-x-1 ml-2\">\n                      {editingPlaylist === playlist.id ? (\n                        <button\n                          onClick={() => renamePlaylist(playlist.id)}\n                          className=\"p-1 hover:bg-green-500/30 rounded\"\n                          title=\"Conferma\"\n                        >\n                          <span className=\"text-green-400\">✓</span>\n                        </button>\n                      ) : (\n                        <button\n                          onClick={(e) => {\n                            e.stopPropagation()\n                            setEditingPlaylist(playlist.id)\n                            setEditName(playlist.name)\n                          }}\n                          className=\"p-1 hover:bg-dj-accent/30 rounded\"\n                          title=\"Rinomina\"\n                        >\n                          <Edit3 size={14} className=\"text-dj-light/60\" />\n                        </button>\n                      )}\n                      \n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation()\n                          deletePlaylist(playlist.id)\n                        }}\n                        className=\"p-1 hover:bg-red-500/30 rounded\"\n                        title=\"Elimina playlist\"\n                      >\n                        <Trash2 size={14} className=\"text-red-400\" />\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n              \n              {/* Nuova Playlist */}\n              {isCreatingPlaylist ? (\n                <div className=\"flex items-center space-x-2 p-3 bg-dj-accent/20 rounded-lg\">\n                  <input\n                    type=\"text\"\n                    value={newPlaylistName}\n                    onChange={(e) => setNewPlaylistName(e.target.value)}\n                    placeholder=\"Nome playlist...\"\n                    className=\"flex-1 bg-transparent border-none outline-none text-white placeholder-dj-light/40\"\n                    title=\"Inserisci il nome della nuova playlist\"\n                    autoFocus\n                    onKeyPress={(e) => e.key === 'Enter' && createPlaylistRockSolid()}\n                    onBlur={() => {\n                      if (newPlaylistName.trim()) {\n                        createPlaylistRockSolid()\n                      } else {\n                        setIsCreatingPlaylist(false)\n                        setNewPlaylistName('')\n                      }\n                    }}\n                  />\n                                      <button\n                      onClick={createPlaylistRockSolid}\n                      className=\"p-1 hover:bg-dj-accent/30 rounded\"\n                      title=\"Crea playlist\"\n                    >\n                    <Plus size={16} />\n                  </button>\n                </div>\n              ) : (\n                <button\n                  onClick={() => setIsCreatingPlaylist(true)}\n                  className=\"w-full flex items-center justify-center space-x-2 p-3 bg-dj-accent/20 text-dj-light/80 hover:bg-dj-accent/30 hover:text-white rounded-lg transition-all\"\n                >\n                  <Plus size={16} />\n                  <span>Nuova Playlist</span>\n                </button>\n              )}\n            </div>\n          </div>\n\n          {/* Contenuto Playlist Attiva */}\n          {currentPlaylist && (\n            <div className=\"bg-dj-secondary rounded-xl p-4 border border-dj-accent/20\">\n              <div className=\"mb-4\">\n                <h4 className=\"text-lg font-dj font-bold text-white\">{currentPlaylist.name}</h4>\n                <p className=\"text-sm text-dj-light/60\">\n                  {currentPlaylist.tracks ? currentPlaylist.tracks.filter(t => t && t.id).length : 0} tracce\n                </p>\n              </div>\n              \n              <div className=\"space-y-2 max-h-[400px] overflow-y-auto\">\n                {(!currentPlaylist.tracks || currentPlaylist.tracks.filter(t => t && t.id).length === 0) ? (\n                  <div className=\"text-center py-8 text-dj-light/40\">\n                    <Music size={32} className=\"mx-auto mb-2\" />\n                    <p className=\"text-sm\">Playlist vuota</p>\n                  </div>\n                ) : (\n                  (currentPlaylist.tracks || [])\n                    .filter(track => {\n                      // FILTRO ULTRA-ROBUSTO: Verifica che track esista e abbia le proprietà necessarie\n                      if (!track || typeof track !== 'object') {\n                        console.warn('⚠️ Track is not a valid object:', track)\n                        return false\n                      }\n                      if (!track.id) {\n                        console.warn('⚠️ Track missing id:', track)\n                        return false\n                      }\n                      if (!track.title) {\n                        console.warn('⚠️ Track missing title:', track)\n                        return false\n                      }\n                      return true\n                    })\n                    .map((track, index) => {\n                      // PROTEZIONE AGGIUNTIVA: Verifica ancora una volta prima del render\n                      if (!track || !track.title) {\n                        console.error('❌ CRITICAL: Track passed filter but is invalid:', track)\n                        return null\n                      }\n                      return (\n                        <div\n                          key={track.id}\n                          className=\"flex items-center space-x-2 p-2 bg-dj-primary/20 rounded hover:bg-dj-primary/30\"\n                        >\n                          <span className=\"text-xs text-dj-accent font-bold w-6\">{index + 1}</span>\n                          <div className=\"flex-1 min-w-0\">\n                            <p className=\"text-sm text-white truncate\">{track.title || 'Titolo sconosciuto'}</p>\n                            <p className=\"text-xs text-dj-light/60 truncate\">{track.artist || 'Artista sconosciuto'}</p>\n                          </div>\n                          <button\n                            onClick={() => removeTrackFromPlaylist(track.id, currentPlaylist.id)}\n                            className=\"p-1 hover:bg-red-500/30 rounded\"\n                            title=\"Rimuovi\"\n                          >\n                            <X size={14} className=\"text-red-400\" />\n                          </button>\n                        </div>\n                      )\n                    })\n                    .filter(element => element !== null) // Rimuovi elementi null dal render\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default LibraryManager\n"],"names":["Filter","createLucideIcon","FolderOpen","HardDrive","PenLine","Plus","Search","Star","Trash2","generateWaveformPeaksFromBlob","blob","numSamples","arrayBuffer","AudioCtx","ac","audioBuffer","channelData","blockSize","peaks","i","start","end","max","j","v","safeDatabaseOperation","operation","operationName","maxRetries","lastError","attempt","error","delay","resolve","FileUploadManager","onProgress","__publicField","files","validFiles","file","uploadedTracks","track","lowerName","ext","_b","_a","e","_d","_c","metadata","_f","_e","isElectron","duration","waveform","_j","_i","_l","_k","analysis","_h","_g","_n","_m","trackId","localDatabase","_p","_o","_q","buf","saved","_s","_r","putBlob","_u","_t","ie","_w","_v","_y","_x","savedTrack","_A","_z","timeoutPromise","_","reject","analysisPromise","decodeError","audio","objectUrl","cleanup","timeout","time","pattern","filename","nameWithoutExt","artistTitleMatch","titleArtistMatch","lowerFilename","genreKeywords","genre","keywords","keyword","cleanupError","metadataError","srcError","estimatedBitrate","estimatedDuration","electronError","fileUrl","audioError","progress","status","tracks","errors","errorMsg","fileArray","valid","invalid","hasValidExt","skipWaveformGeneration","durationError","dbError","isElectronEnv","storageError","deleteError","getError","progressError","MemoryManager","isImporting","totalFiles","completedFiles","onMemoryWarning","memoryInfo","setMemoryInfo","useState","showDetails","setShowDetails","memoryHistory","setMemoryHistory","getMemoryInfo","useCallback","memory","used","total","percentage","useEffect","interval","info","prev","newHistory","handleMemoryWarning","getRecommendations","recommendations","formatBytes","bytes","k","sizes","getStatusColor","getStatusIcon","jsx","CheckCircle","Activity","AlertTriangle","jsxs","value","index","rec","FolderImporter","onImportComplete","setIsImporting","importProgress","setImportProgress","setTotalFiles","setCompletedFiles","showProgress","setShowProgress","showSettings","setShowSettings","currentBatch","setCurrentBatch","totalBatches","setTotalBatches","importSettings","setImportSettings","folderInputRef","useRef","abortControllerRef","uploadManagerRef","calculateOptimalSettings","fileCount","handleFolderSelect","event","optimalSettings","p","audioFiles","extension","batchCount","newTracks","uploadInBatches","settings","batchIndex","batch","batchPromises","batchTracks","cancelImport","openFolderSelector","AlertCircle","Clock","getStatusText","ErrorBoundary","Settings","item","AdvancedSearch","filters","onFiltersChange","availableGenres","availableArtists","availableAlbums","showAdvanced","setShowAdvanced","currentFilters","setCurrentFilters","timeoutId","handleFilterChange","key","clearFilters","hasActiveFilters","formatDuration","seconds","mins","secs","X","artist","album","rating","LibraryManager","setTracks","filteredTracks","setFilteredTracks","searchQuery","setSearchQuery","searchFilters","setSearchFilters","sortBy","setSortBy","sortOrder","setSortOrder","selectedTrack","setSelectedTrack","showUploadForm","setShowUploadForm","uploadProgress","setUploadProgress","isUploading","setIsUploading","fileInputRef","playlists","setPlaylists","activePlaylist","setActivePlaylist","newPlaylistName","setNewPlaylistName","isCreatingPlaylist","setIsCreatingPlaylist","editingPlaylist","setEditingPlaylist","editName","setEditName","draggedTrack","setDraggedTrack","dragOverPlaylist","setDragOverPlaylist","handleDragStart","handleDragOver","playlistId","handleDragLeave","handleDrop","playlist","t","updatedTracks","updatedPlaylists","removeTrackFromPlaylist","addTrackToSelectedPlaylist","filtered","query","a","b","aValue","bValue","loadTracks","allTracks","getBlob","onDbUpdated","onVisibility","forceDatabaseRestore","allPlaylists","reconstructedPlaylists","validTracks","fullTrack","savedPlaylists","playlistsToSave","localError","createPlaylistRockSolid","playlistName","wasNameEmpty","newPlaylist","renamePlaylist","deletePlaylist","deleteTrack","handleUpload","results","handleClearLibrary","currentPlaylist","handlePlaylistUpdatedFromConsole","handleSyncRequestFromConsole","Upload","Music","Edit3","element"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7]}